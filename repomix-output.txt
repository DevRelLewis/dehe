This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-06-25T03:09:20.897Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
app/
  globals.css
  layout.tsx
  page.tsx
components/
  AISummary.tsx
  AlertsFeed.tsx
  AppointmentsTable.tsx
  BillingOverview.tsx
  NotesTimeline.tsx
  PatientHeaderCard.tsx
  PatientProfile.tsx
  QuickActionsMenu.tsx
  VitalsPanel.tsx
hooks/
  usePatientData.ts
public/
  file.svg
  globe.svg
  next.svg
  vercel.svg
  window.svg
types/
  patient.ts
.gitignore
eslint.config.mjs
next.config.ts
package.json
postcss.config.mjs
README.md
tailwind.config.js
tsconfig.json

================================================================
Repository Files
================================================================

================
File: app/globals.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  * {
    box-sizing: border-box;
  }
  
  html {
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
    line-height: 1.6;
    color: #1f2937;
  }
  
  body {
    margin: 0;
    padding: 0;
    background-color: #f9fafb;
    min-height: 100vh;
  }
  
  h1, h2, h3, h4, h5, h6 {
    font-weight: 600;
    line-height: 1.4;
    margin: 0 0 0.5rem 0;
  }
  
  h1 {
    font-size: 2rem;
    color: #111827;
  }
  
  h2 {
    font-size: 1.5rem;
    color: #111827;
  }
  
  h3 {
    font-size: 1.25rem;
    color: #374151;
  }
  
  p {
    margin: 0 0 1rem 0;
    color: #6b7280;
  }
  
  button {
    cursor: pointer;
    border: none;
    outline: none;
    background: none;
    font-family: inherit;
  }
  
  input, textarea, select {
    font-family: inherit;
    border: 1px solid #d1d5db;
    border-radius: 0.5rem;
    padding: 0.5rem 0.75rem;
    outline: none;
    transition: border-color 0.2s, box-shadow 0.2s;
  }
  
  input:focus, textarea:focus, select:focus {
    border-color: #3b82f6;
    box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
  }
}

@layer components {
  /* Patient Profile Header */
  .patient-header {
    @apply bg-white border-b border-gray-200 px-6 py-8;
  }
  
  .patient-name {
    @apply text-3xl font-bold text-gray-900 mb-2;
  }
  
  .patient-info {
    @apply text-sm text-gray-600 space-y-1;
  }
  
  .patient-status {
    @apply inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium;
  }
  
  .patient-status.active {
    @apply bg-green-100 text-green-800;
  }
  
  .patient-status.inactive {
    @apply bg-red-100 text-red-800;
  }
  
  /* Quick Actions */
  .quick-actions {
    @apply bg-white rounded-lg shadow-sm border border-gray-200 p-6 mb-6;
  }
  
  .quick-actions-grid {
    @apply grid grid-cols-2 md:grid-cols-4 gap-4;
  }
  
  .quick-action-btn {
    @apply flex flex-col items-center justify-center p-4 border border-gray-200 rounded-lg hover:border-blue-300 hover:bg-blue-50 transition-all duration-200 text-center space-y-2;
  }
  
  .quick-action-icon {
    @apply w-8 h-8 text-gray-600;
  }
  
  .quick-action-text {
    @apply text-sm font-medium text-gray-700;
  }
  
  .quick-action-subtext {
    @apply text-xs text-gray-500;
  }
  
  /* Cards */
  .card {
    @apply bg-white rounded-lg shadow-sm border border-gray-200 p-6 mb-6;
  }
  
  .card-header {
    @apply flex items-center justify-between mb-4;
  }
  
  .card-title {
    @apply text-lg font-semibold text-gray-900 flex items-center space-x-2;
  }
  
  .card-badge {
    @apply bg-red-100 text-red-800 px-2 py-1 rounded-full text-xs font-medium;
  }
  
  /* Alerts */
  .alert-item {
    @apply border rounded-lg p-4 mb-3 last:mb-0;
  }
  
  .alert-item.form-submitted {
    @apply bg-blue-50 border-blue-200 text-blue-800;
  }
  
  .alert-item.message-received {
    @apply bg-green-50 border-green-200 text-green-800;
  }
  
  .alert-item.appointment-scheduled {
    @apply bg-purple-50 border-purple-200 text-purple-800;
  }
  
  .alert-item.action-required {
    @apply bg-red-50 border-red-200 text-red-800;
  }
  
  .alert-header {
    @apply flex items-start justify-between mb-2;
  }
  
  .alert-title {
    @apply font-medium text-sm;
  }
  
  .alert-description {
    @apply text-sm opacity-90 mb-3;
  }
  
  .alert-meta {
    @apply flex items-center justify-between text-xs opacity-75;
  }
  
  .alert-tag {
    @apply inline-flex items-center px-2 py-0.5 rounded text-xs bg-gray-100 text-gray-800 mr-1;
  }
  
  /* Vitals */
  .vitals-grid {
    @apply grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4;
  }
  
  .vital-item {
    @apply flex items-center space-x-3;
  }
  
  .vital-icon {
    @apply p-2 rounded-lg;
  }
  
  .vital-icon.weight {
    @apply bg-blue-100 text-blue-600;
  }
  
  .vital-icon.height {
    @apply bg-green-100 text-green-600;
  }
  
  .vital-icon.bmi {
    @apply bg-purple-100 text-purple-600;
  }
  
  .vital-icon.blood-pressure {
    @apply bg-red-100 text-red-600;
  }
  
  .vital-label {
    @apply text-sm text-gray-500;
  }
  
  .vital-value {
    @apply text-lg font-semibold text-gray-900;
  }
  
  /* Contact Information */
  .contact-grid {
    @apply grid grid-cols-1 md:grid-cols-2 gap-6;
  }
  
  .contact-item {
    @apply flex items-start space-x-3;
  }
  
  .contact-icon {
    @apply w-5 h-5 text-gray-400 mt-0.5;
  }
  
  .contact-label {
    @apply text-sm font-medium text-gray-700;
  }
  
  .contact-value {
    @apply text-sm text-gray-600;
  }
  
  /* Buttons */
  .btn {
    @apply inline-flex items-center justify-center px-4 py-2 text-sm font-medium rounded-lg transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2;
  }
  
  .btn-primary {
    @apply bg-blue-600 text-white hover:bg-blue-700 focus:ring-blue-500;
  }
  
  .btn-secondary {
    @apply bg-gray-200 text-gray-900 hover:bg-gray-300 focus:ring-gray-500;
  }
  
  .btn-success {
    @apply bg-green-600 text-white hover:bg-green-700 focus:ring-green-500;
  }
  
  .btn-danger {
    @apply bg-red-600 text-white hover:bg-red-700 focus:ring-red-500;
  }
  
  .btn-outline {
    @apply border border-gray-300 bg-white text-gray-700 hover:bg-gray-50 focus:ring-gray-500;
  }
  
  /* Status badges */
  .status-badge {
    @apply inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium;
  }
  
  .status-badge.confirmed {
    @apply bg-green-100 text-green-800;
  }
  
  .status-badge.pending {
    @apply bg-yellow-100 text-yellow-800;
  }
  
  .status-badge.cancelled {
    @apply bg-red-100 text-red-800;
  }
  
  .status-badge.completed {
    @apply bg-blue-100 text-blue-800;
  }
  
  /* Loading states */
  .loading-spinner {
    @apply animate-spin rounded-full border-b-2 border-blue-600;
  }
  
  /* Responsive text sizing */
  .text-responsive-xl {
    @apply text-xl sm:text-2xl lg:text-3xl;
  }
  
  .text-responsive-lg {
    @apply text-lg sm:text-xl lg:text-2xl;
  }
  
  /* Healthcare specific colors */
  .text-medical-primary {
    @apply text-blue-700;
  }
  
  .bg-medical-primary {
    @apply bg-blue-600;
  }
  
  .text-medical-success {
    @apply text-green-700;
  }
  
  .bg-medical-success {
    @apply bg-green-600;
  }
  
  .text-medical-warning {
    @apply text-amber-700;
  }
  
  .bg-medical-warning {
    @apply bg-amber-500;
  }
  
  .text-medical-danger {
    @apply text-red-700;
  }
  
  .bg-medical-danger {
    @apply bg-red-600;
  }

  /* Hide scrollbars globally while maintaining scroll functionality */

  /* For Webkit browsers (Chrome, Safari, Edge) */
  ::-webkit-scrollbar {
    display: none;
  }

  /* For Firefox */
  * {
    scrollbar-width: none;
  }

  /* For Internet Explorer and Edge Legacy */
  * {
    -ms-overflow-style: none;
  }

  /* Specific classes for components that need hidden scrollbars */
  .hide-scrollbar {
    /* Firefox */
    scrollbar-width: none;
    /* IE and Edge */
    -ms-overflow-style: none;
  }

  .hide-scrollbar::-webkit-scrollbar {
    /* Chrome, Safari, Edge */
    display: none;
  }

  /* Patient profile specific styling */
  .patient-profile-container {
    overflow-y: auto;
    scrollbar-width: none;
    -ms-overflow-style: none;
  }

  .patient-profile-container::-webkit-scrollbar {
    display: none;
  }

  /* Main content areas */
  .main-content {
    overflow-y: auto;
    scrollbar-width: none;
    -ms-overflow-style: none;
  }

  .main-content::-webkit-scrollbar {
    display: none;
  }

  /* Modal content areas */
  .modal-scrollable {
    overflow-y: auto;
    scrollbar-width: none;
    -ms-overflow-style: none;
  }

  .modal-scrollable::-webkit-scrollbar {
    display: none;
  }

  /* Sidebar scrollable areas */
  .sidebar-content {
    overflow-y: auto;
    scrollbar-width: none;
    -ms-overflow-style: none;
  }

  .sidebar-content::-webkit-scrollbar {
    display: none;
  }

}

================
File: app/layout.tsx
================
// app/layout.tsx
import './globals.css'

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <body>{children}</body>
    </html>
  )
}

================
File: app/page.tsx
================
'use client';

import { useState, useEffect } from 'react';
import PatientProfile from '../components/PatientProfile';
import { usePatientData } from '../hooks/usePatientData';

export default function Home() {
  const { patientData, loading, error } = usePatientData();

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="animate-spin rounded-full h-32 w-32 border-b-2 border-blue-600"></div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <h1 className="text-2xl font-bold text-red-600 mb-2">Error Loading Patient Data</h1>
          <p className="text-gray-600">{error}</p>
        </div>
      </div>
    );
  }

  // Add this null check
  if (!patientData) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <h1 className="text-2xl font-bold text-gray-600 mb-2">No Patient Data</h1>
          <p className="text-gray-500">Patient data could not be loaded.</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50">
      <PatientProfile data={patientData} />
    </div>
  );
}

================
File: components/AISummary.tsx
================
import React, { useState, useEffect } from 'react';
import { Brain, Sparkles, TrendingUp, AlertCircle } from 'lucide-react';
import { PatientData } from '../types/patient';

interface AISummaryProps {
  data: PatientData;
}

const AISummary: React.FC<AISummaryProps> = ({ data }) => {
  const [summary, setSummary] = useState<string>('');
  const [insights, setInsights] = useState<string[]>([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    // Simulate AI processing delay
    const timer = setTimeout(() => {
      generateAISummary();
      setLoading(false);
    }, 1500);

    return () => clearTimeout(timer);
  }, [data]);

  const generateAISummary = () => {
    const { patient, doctorsNotes, memos, alerts } = data;
    
    // Generate summary based on available data (excluding financial info)
    const age = new Date().getFullYear() - new Date(patient.dateOfBirth).getFullYear();
    const recentNotes = doctorsNotes.slice(0, 2);
    const activeAlerts = alerts.filter(alert => alert.actionRequired).length;

    let summaryText = `${patient.firstName} ${patient.lastName} is a ${age}-year-old ${patient.gender.toLowerCase()} patient with a medical history of ${patient.medicalHistory?.join(', ') || 'no significant conditions'}. `;

    if (patient.allergies?.length > 0) {
      summaryText += `Known allergies include ${patient.allergies.join(', ')}. `;
    }

    if (recentNotes.length > 0) {
      const latestNote = recentNotes[0];
      summaryText += `Most recent visit focused on ${latestNote.summary.toLowerCase()}. `;
    }

    if (activeAlerts > 0) {
      summaryText += `There are ${activeAlerts} active alerts requiring attention.`;
    }

    setSummary(summaryText);

    // Generate insights (excluding financial recommendations)
    const generatedInsights = [];
    
    if (patient.familyHistory?.includes('Diabetes')) {
      generatedInsights.push('Monitor blood glucose levels due to family history of diabetes');
    }
    
    if (patient.medicalHistory?.includes('Asthma')) {
      generatedInsights.push('Ensure asthma action plan is up to date');
    }
    
    if (recentNotes.some(note => note.content.includes('allergy'))) {
      generatedInsights.push('Recent allergy concerns - monitor treatment effectiveness');
    }

    if (patient.medications?.some(med => med.active)) {
      generatedInsights.push('Review current medications for effectiveness and interactions');
    }

    if (generatedInsights.length === 0) {
      generatedInsights.push('Patient appears to be managing conditions well');
      generatedInsights.push('Continue current treatment plan');
    }

    setInsights(generatedInsights);
  };

  return (
    <div className="bg-gradient-to-r from-purple-50 to-blue-50 rounded-lg border border-purple-200 p-6">
      <div className="flex items-center space-x-2 mb-4">
        <div className="p-2 bg-purple-100 rounded-lg">
          <Brain className="w-5 h-5 text-purple-600" />
        </div>
        <h2 className="text-lg font-semibold text-gray-900">AI Patient Summary</h2>
        <Sparkles className="w-4 h-4 text-purple-500" />
      </div>

      {loading ? (
        <div className="space-y-3">
          <div className="animate-pulse bg-purple-100 h-4 rounded w-full"></div>
          <div className="animate-pulse bg-purple-100 h-4 rounded w-4/5"></div>
          <div className="animate-pulse bg-purple-100 h-4 rounded w-3/4"></div>
        </div>
      ) : (
        <>
          <div className="bg-white rounded-lg p-4 mb-4 border border-purple-100">
            <p className="text-gray-700 leading-relaxed">{summary}</p>
          </div>

          <div className="space-y-3">
            <div className="flex items-center space-x-2">
              <TrendingUp className="w-4 h-4 text-blue-600" />
              <h3 className="font-medium text-gray-900">Key Insights</h3>
            </div>
            
            <div className="space-y-2">
              {insights.map((insight, index) => (
                <div
                  key={index}
                  className="flex items-start space-x-2 bg-white rounded-lg p-3 border border-blue-100"
                >
                  <AlertCircle className="w-4 h-4 text-blue-500 mt-0.5 flex-shrink-0" />
                  <span className="text-sm text-gray-700">{insight}</span>
                </div>
              ))}
            </div>
          </div>

          <div className="mt-4 text-xs text-purple-600 bg-purple-50 p-2 rounded">
            💡 This summary is AI-generated based on patient data and should be reviewed by healthcare providers.
          </div>
        </>
      )}
    </div>
  );
};

export default AISummary;

================
File: components/AlertsFeed.tsx
================
import React from 'react';
import { Clock, User, Tag, FileText, MessageSquare, Calendar, X } from 'lucide-react';
import { Alert } from '../types/patient';

interface AlertsFeedProps {
  alerts: Alert[];
  onDismissAlert: (alertId: string) => void;
}

const AlertsFeed: React.FC<AlertsFeedProps> = ({ alerts, onDismissAlert }) => {
  const getAlertIcon = (type: string) => {
    switch (type) {
      case 'FORM_SUBMITTED':
        return <FileText className="w-5 h-5" />;
      case 'MESSAGE_RECEIVED':
        return <MessageSquare className="w-5 h-5" />;
      case 'APPOINTMENT_SCHEDULED':
        return <Calendar className="w-5 h-5" />;
      default:
        return <FileText className="w-5 h-5" />;
    }
  };

  const getAlertColor = (type: string, actionRequired: boolean) => {
    if (actionRequired) {
      return 'bg-red-50 border-red-200 text-red-800';
    }
    
    switch (type) {
      case 'FORM_SUBMITTED':
        return 'bg-blue-50 border-blue-200 text-blue-800';
      case 'MESSAGE_RECEIVED':
        return 'bg-green-50 border-green-200 text-green-800';
      case 'APPOINTMENT_SCHEDULED':
        return 'bg-purple-50 border-purple-200 text-purple-800';
      default:
        return 'bg-gray-50 border-gray-200 text-gray-800';
    }
  };

  const getAlertTitle = (alert: Alert) => {
    switch (alert.type) {
      case 'FORM_SUBMITTED':
        return `Form Submitted: ${alert.data.name}`;
      case 'MESSAGE_RECEIVED':
        return 'New Message Received';
      case 'APPOINTMENT_SCHEDULED':
        return `Appointment Scheduled: ${alert.data.title}`;
      default:
        return alert.type.replace('_', ' ');
    }
  };

  const getAlertDescription = (alert: Alert) => {
    switch (alert.type) {
      case 'FORM_SUBMITTED':
        return `${alert.patient.firstName} ${alert.patient.lastName} submitted a form`;
      case 'MESSAGE_RECEIVED':
        return alert.data.message.substring(0, 100) + (alert.data.message.length > 100 ? '...' : '');
      case 'APPOINTMENT_SCHEDULED':
        return `Scheduled for ${new Date(alert.data.start).toLocaleDateString()}`;
      default:
        return 'Alert requires attention';
    }
  };

  if (alerts.length === 0) {
    return (
      <div className="text-center py-8">
        <p className="text-gray-500">No active alerts</p>
      </div>
    );
  }

  return (
    <div className="space-y-4">
      {alerts.map((alert) => (
        <div
          key={alert.id}
          className={`border rounded-lg p-4 ${getAlertColor(alert.type, alert.actionRequired)}`}
        >
          <div className="flex items-start space-x-3">
            <div className="flex-shrink-0 mt-1">
              {getAlertIcon(alert.type)}
            </div>
            
            <div className="flex-1 min-w-0">
              <div className="flex items-center justify-between mb-2">
                <h3 className="font-medium text-base">{getAlertTitle(alert)}</h3>
                <div className="flex items-center space-x-2">
                  {alert.actionRequired && (
                    <span className="bg-red-100 text-red-800 px-2 py-1 rounded-full text-xs font-medium border border-red-200">
                      Action Required
                    </span>
                  )}
                  <button
                    onClick={(e) => {
                      e.stopPropagation();
                      onDismissAlert(alert.id);
                    }}
                    className="p-1 hover:bg-gray-200 rounded-full transition-colors group"
                    title="Dismiss alert"
                  >
                    <X className="w-4 h-4 text-gray-400 group-hover:text-gray-600" />
                  </button>
                </div>
              </div>
              
              <p className="text-sm mb-3 leading-relaxed">{getAlertDescription(alert)}</p>
              
              <div className="flex items-center justify-between text-xs">
                <div className="flex items-center space-x-4">
                  <div className="flex items-center space-x-1">
                    <Clock className="w-3 h-3" />
                    <span>{new Date(alert.createdDate).toLocaleString()}</span>
                  </div>
                  
                  <div className="flex items-center space-x-1">
                    <User className="w-3 h-3" />
                    <span>{alert.assignedProvider.firstName} {alert.assignedProvider.lastName}</span>
                  </div>
                </div>
                
                <div className="flex items-center space-x-1">
                  {alert.tags.map((tag) => (
                    <span
                      key={tag.id}
                      className="inline-flex items-center px-2 py-0.5 rounded text-xs bg-gray-100 text-gray-800 border border-gray-200"
                    >
                      <Tag className="w-3 h-3 mr-1" />
                      {tag.name}
                    </span>
                  ))}
                </div>
              </div>
            </div>
          </div>
        </div>
      ))}
    </div>
  );
};

export default AlertsFeed;

================
File: components/AppointmentsTable.tsx
================
import React, { useState } from 'react';
import { Calendar, Clock, MapPin, CheckCircle, AlertCircle, Edit3, X, Save, RotateCcw } from 'lucide-react';
import { Event, PatientData } from '../types/patient';

interface AppointmentsTableProps {
  events: Event[];
  compact?: boolean;
  onDataUpdate?: (updatedData: PatientData) => void;
  patientData?: PatientData;
}

const AppointmentsTable: React.FC<AppointmentsTableProps> = ({ 
  events, 
  compact = false, 
  onDataUpdate, 
  patientData 
}) => {
  const [showRescheduleModal, setShowRescheduleModal] = useState(false);
  const [showCancelModal, setShowCancelModal] = useState(false);
  const [selectedEvent, setSelectedEvent] = useState<Event | null>(null);
  const [newDate, setNewDate] = useState('');
  const [newTime, setNewTime] = useState('');
  const [cancelReason, setCancelReason] = useState('');
  const [isProcessing, setIsProcessing] = useState(false);

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'COMPLETED':
        return 'bg-green-100 text-green-800';
      case 'CONFIRMED':
        return 'bg-blue-100 text-blue-800';
      case 'CANCELLED':
        return 'bg-red-100 text-red-800';
      case 'RESCHEDULED':
        return 'bg-orange-100 text-orange-800';
      default:
        return 'bg-gray-100 text-gray-800';
    }
  };

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'COMPLETED':
        return <CheckCircle className="w-4 h-4" />;
      case 'CONFIRMED':
        return <Calendar className="w-4 h-4" />;
      case 'CANCELLED':
        return <X className="w-4 h-4" />;
      case 'RESCHEDULED':
        return <RotateCcw className="w-4 h-4" />;
      default:
        return <AlertCircle className="w-4 h-4" />;
    }
  };

  const canModifyAppointment = (event: Event) => {
    const appointmentDate = new Date(event.start);
    const now = new Date();
    const isUpcoming = appointmentDate > now;
    const isNotCompleted = event.status !== 'COMPLETED' && event.status !== 'CANCELLED';
    
    // Debug logging to help troubleshoot
    console.log('Appointment check:', {
      title: event.title,
      appointmentDate: appointmentDate.toISOString(),
      now: now.toISOString(),
      isUpcoming,
      status: event.status,
      isNotCompleted,
      canModify: isUpcoming && isNotCompleted
    });
    
    return isUpcoming && isNotCompleted;
  };

  const handleReschedule = (event: Event) => {
    setSelectedEvent(event);
    const eventDate = new Date(event.start);
    setNewDate(eventDate.toISOString().split('T')[0]);
    setNewTime(eventDate.toTimeString().slice(0, 5));
    setShowRescheduleModal(true);
  };

  const handleCancel = (event: Event) => {
    setSelectedEvent(event);
    setCancelReason('');
    setShowCancelModal(true);
  };

  const processReschedule = async () => {
    if (!selectedEvent || !newDate || !newTime || !patientData || !onDataUpdate) return;
    
    setIsProcessing(true);
    
    // Simulate API delay
    await new Promise(resolve => setTimeout(resolve, 1500));
    
    const newDateTime = new Date(`${newDate}T${newTime}`);
    const duration = new Date(selectedEvent.end).getTime() - new Date(selectedEvent.start).getTime();
    const newEndTime = new Date(newDateTime.getTime() + duration);
    
    const updatedEvents = patientData.events.map(event => {
      if (event.id === selectedEvent.id) {
        return {
          ...event,
          start: newDateTime.toISOString(),
          end: newEndTime.toISOString(),
          status: 'CONFIRMED' // Reset to confirmed after reschedule
        };
      }
      return event;
    });

    // Create a memo about the reschedule
    const rescheduleNote = `Appointment "${selectedEvent.title}" rescheduled from ${new Date(selectedEvent.start).toLocaleString()} to ${newDateTime.toLocaleString()}`;
    
    const newMemo = {
      id: `memo_reschedule_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
      patient: {
        id: patientData.patient.id,
        firstName: patientData.patient.firstName,
        lastName: patientData.patient.lastName,
        email: patientData.patient.email,
        phoneNumber: patientData.patient.phoneNumber
      },
      note: rescheduleNote,
      creator: {
        id: "usr_current_provider",
        firstName: "Current",
        lastName: "Provider",
        email: "provider@decodahealth.com"
      },
      createdDate: new Date().toISOString(),
      updatedDate: new Date().toISOString()
    };

    const updatedPatientData = {
      ...patientData,
      events: updatedEvents,
      memos: [newMemo, ...patientData.memos]
    };

    onDataUpdate(updatedPatientData);
    
    setIsProcessing(false);
    setShowRescheduleModal(false);
    setSelectedEvent(null);
    
    alert(`✅ Appointment Rescheduled Successfully!\n\nAppointment: ${selectedEvent.title}\nNew Date: ${newDateTime.toLocaleDateString()}\nNew Time: ${newDateTime.toLocaleTimeString()}\n\nA memo has been added to the patient's record.`);
  };

  const processCancel = async () => {
    if (!selectedEvent || !cancelReason.trim() || !patientData || !onDataUpdate) return;
    
    setIsProcessing(true);
    
    // Simulate API delay
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    const updatedEvents = patientData.events.map(event => {
      if (event.id === selectedEvent.id) {
        return {
          ...event,
          status: 'CANCELLED'
        };
      }
      return event;
    });

    // Create a memo about the cancellation
    const cancelNote = `Appointment "${selectedEvent.title}" cancelled. Reason: ${cancelReason.trim()}. Original date: ${new Date(selectedEvent.start).toLocaleString()}`;
    
    const newMemo = {
      id: `memo_cancel_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
      patient: {
        id: patientData.patient.id,
        firstName: patientData.patient.firstName,
        lastName: patientData.patient.lastName,
        email: patientData.patient.email,
        phoneNumber: patientData.patient.phoneNumber
      },
      note: cancelNote,
      creator: {
        id: "usr_current_provider",
        firstName: "Current",
        lastName: "Provider",
        email: "provider@decodahealth.com"
      },
      createdDate: new Date().toISOString(),
      updatedDate: new Date().toISOString()
    };

    const updatedPatientData = {
      ...patientData,
      events: updatedEvents,
      memos: [newMemo, ...patientData.memos]
    };

    onDataUpdate(updatedPatientData);
    
    setIsProcessing(false);
    setShowCancelModal(false);
    setSelectedEvent(null);
    setCancelReason('');
    
    alert(`✅ Appointment Cancelled Successfully!\n\nAppointment: ${selectedEvent.title}\nReason: ${cancelReason}\nDate: ${new Date(selectedEvent.start).toLocaleString()}\n\nA memo has been added to the patient's record.`);
  };

  if (events.length === 0) {
    return (
      <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
        <h2 className="text-lg font-semibold text-gray-900 mb-4">
          {compact ? 'Recent Appointments' : 'Appointments'}
        </h2>
        <div className="text-center py-8">
          <Calendar className="w-12 h-12 text-gray-400 mx-auto mb-4" />
          <p className="text-gray-500">No appointments found</p>
        </div>
      </div>
    );
  }

  return (
    <>
      <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
        <div className="flex items-center justify-between mb-4">
          <h2 className="text-lg font-semibold text-gray-900">
            {compact ? 'Recent Appointments' : 'Appointments'}
          </h2>
          {compact && events.length > 3 && (
            <button className="text-blue-600 hover:text-blue-800 text-sm font-medium">
              View All
            </button>
          )}
        </div>

        <div className="space-y-4">
          {events.map((event) => (
            <div
              key={event.id}
              className="border border-gray-200 rounded-lg p-4 hover:bg-gray-50 transition-colors"
            >
              <div className="flex items-start justify-between">
                <div className="flex-1">
                  <div className="flex items-center space-x-2 mb-2">
                    <h3 className="font-medium text-gray-900">{event.title}</h3>
                    <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getStatusColor(event.status)}`}>
                      {getStatusIcon(event.status)}
                      <span className="ml-1">{event.status}</span>
                    </span>
                  </div>

                  <div className="space-y-1 text-sm text-gray-600">
                    <div className="flex items-center space-x-2">
                      <Clock className="w-4 h-4" />
                      <span>
                        {new Date(event.start).toLocaleDateString()} at{' '}
                        {new Date(event.start).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}
                      </span>
                    </div>
                    
                    <div className="flex items-center space-x-2">
                      <MapPin className="w-4 h-4" />
                      <span>{event.location.name}</span>
                    </div>

                    <div className="flex items-center space-x-2">
                      <span className="font-medium">Provider:</span>
                      <span>{event.organizer.firstName} {event.organizer.lastName}</span>
                    </div>

                    {event.appointment?.reason && (
                      <div className="flex items-center space-x-2">
                        <span className="font-medium">Reason:</span>
                        <span>{event.appointment.reason}</span>
                      </div>
                    )}
                  </div>
                </div>

                {/* 🔥 NEW: Action Buttons - Show for all appointments temporarily for debugging */}
                {(canModifyAppointment(event) || true) && (
                  <div className="flex items-center space-x-2 ml-4">
                    <button
                      onClick={() => handleReschedule(event)}
                      disabled={!canModifyAppointment(event)}
                      className={`flex items-center space-x-1 px-3 py-1.5 text-xs font-medium rounded-lg transition-colors ${
                        canModifyAppointment(event)
                          ? 'text-blue-700 bg-blue-50 border border-blue-200 hover:bg-blue-100'
                          : 'text-gray-400 bg-gray-50 border border-gray-200 cursor-not-allowed'
                      }`}
                      title={canModifyAppointment(event) ? "Reschedule appointment" : "Cannot reschedule completed/past appointments"}
                    >
                      <Edit3 className="w-3 h-3" />
                      <span>Reschedule</span>
                    </button>
                    <button
                      onClick={() => handleCancel(event)}
                      disabled={!canModifyAppointment(event)}
                      className={`flex items-center space-x-1 px-3 py-1.5 text-xs font-medium rounded-lg transition-colors ${
                        canModifyAppointment(event)
                          ? 'text-red-700 bg-red-50 border border-red-200 hover:bg-red-100'
                          : 'text-gray-400 bg-gray-50 border border-gray-200 cursor-not-allowed'
                      }`}
                      title={canModifyAppointment(event) ? "Cancel appointment" : "Cannot cancel completed/past appointments"}
                    >
                      <X className="w-3 h-3" />
                      <span>Cancel</span>
                    </button>
                  </div>
                )}
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* Reschedule Modal */}
      {showRescheduleModal && selectedEvent && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50 backdrop-blur-sm">
          <div className="bg-white rounded-xl p-6 max-w-md w-full shadow-2xl">
            <div className="flex items-center justify-between mb-6">
              <div>
                <h3 className="text-xl font-semibold text-gray-900">Reschedule Appointment</h3>
                <p className="text-sm text-gray-500 mt-1">
                  {selectedEvent.title} with {selectedEvent.organizer.firstName} {selectedEvent.organizer.lastName}
                </p>
              </div>
              <button
                onClick={() => setShowRescheduleModal(false)}
                className="p-2 hover:bg-gray-100 rounded-full transition-colors"
                disabled={isProcessing}
              >
                <X className="w-5 h-5 text-gray-500" />
              </button>
            </div>

            <div className="space-y-4 mb-6">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Current Date & Time
                </label>
                <div className="bg-gray-50 p-3 rounded-lg border">
                  <p className="text-sm text-gray-800">
                    {new Date(selectedEvent.start).toLocaleDateString()} at{' '}
                    {new Date(selectedEvent.start).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}
                  </p>
                </div>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  New Date
                </label>
                <input
                  type="date"
                  value={newDate}
                  onChange={(e) => setNewDate(e.target.value)}
                  min={new Date().toISOString().split('T')[0]}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  disabled={isProcessing}
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  New Time
                </label>
                <input
                  type="time"
                  value={newTime}
                  onChange={(e) => setNewTime(e.target.value)}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  disabled={isProcessing}
                />
              </div>
            </div>

            <div className="flex space-x-3">
              <button
                onClick={() => setShowRescheduleModal(false)}
                className="flex-1 px-4 py-3 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 transition-colors font-medium"
                disabled={isProcessing}
              >
                Cancel
              </button>
              <button
                onClick={processReschedule}
                disabled={!newDate || !newTime || isProcessing}
                className={`flex-1 px-4 py-3 rounded-lg font-medium transition-all duration-200 ${
                  newDate && newTime && !isProcessing
                    ? 'bg-blue-500 text-white hover:bg-blue-600 transform hover:scale-105 shadow-lg'
                    : 'bg-gray-300 text-gray-500 cursor-not-allowed'
                }`}
              >
                {isProcessing ? (
                  <div className="flex items-center justify-center space-x-2">
                    <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
                    <span>Rescheduling...</span>
                  </div>
                ) : (
                  'Reschedule'
                )}
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Cancel Modal */}
      {showCancelModal && selectedEvent && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50 backdrop-blur-sm">
          <div className="bg-white rounded-xl p-6 max-w-md w-full shadow-2xl">
            <div className="flex items-center justify-between mb-6">
              <div>
                <h3 className="text-xl font-semibold text-gray-900">Cancel Appointment</h3>
                <p className="text-sm text-gray-500 mt-1">
                  {selectedEvent.title} on {new Date(selectedEvent.start).toLocaleDateString()}
                </p>
              </div>
              <button
                onClick={() => setShowCancelModal(false)}
                className="p-2 hover:bg-gray-100 rounded-full transition-colors"
                disabled={isProcessing}
              >
                <X className="w-5 h-5 text-gray-500" />
              </button>
            </div>

            <div className="mb-6">
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Reason for Cancellation *
              </label>
              <textarea
                value={cancelReason}
                onChange={(e) => setCancelReason(e.target.value)}
                placeholder="Please provide a reason for cancelling this appointment..."
                rows={3}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-red-500 focus:border-transparent resize-none"
                disabled={isProcessing}
              />
            </div>

            <div className="bg-red-50 border border-red-200 rounded-lg p-4 mb-6">
              <div className="flex items-start space-x-2">
                <AlertCircle className="w-5 h-5 text-red-500 mt-0.5" />
                <div>
                  <p className="text-sm font-medium text-red-800">
                    Confirm Cancellation
                  </p>
                  <p className="text-xs text-red-700 mt-1">
                    This action cannot be undone. The appointment will be marked as cancelled and a note will be added to the patient's record.
                  </p>
                </div>
              </div>
            </div>

            <div className="flex space-x-3">
              <button
                onClick={() => setShowCancelModal(false)}
                className="flex-1 px-4 py-3 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 transition-colors font-medium"
                disabled={isProcessing}
              >
                Keep Appointment
              </button>
              <button
                onClick={processCancel}
                disabled={!cancelReason.trim() || isProcessing}
                className={`flex-1 px-4 py-3 rounded-lg font-medium transition-all duration-200 ${
                  cancelReason.trim() && !isProcessing
                    ? 'bg-red-500 text-white hover:bg-red-600 transform hover:scale-105 shadow-lg'
                    : 'bg-gray-300 text-gray-500 cursor-not-allowed'
                }`}
              >
                {isProcessing ? (
                  <div className="flex items-center justify-center space-x-2">
                    <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
                    <span>Cancelling...</span>
                  </div>
                ) : (
                  'Cancel Appointment'
                )}
              </button>
            </div>
          </div>
        </div>
      )}
    </>
  );
};

export default AppointmentsTable;

================
File: components/BillingOverview.tsx
================
import React, { useState, useEffect } from 'react';
import { DollarSign, CreditCard, AlertTriangle, CheckCircle, Calendar, User, Clock, Bell, Zap, TrendingUp } from 'lucide-react';
import { Charge, PaymentMethod, PatientData } from '../types/patient';

interface BillingOverviewProps {
  charges: Charge[];
  paymentMethods?: PaymentMethod[];
  compact?: boolean;
  onDataUpdate?: (updatedData: PatientData) => void;
  patientData?: PatientData;
}

const BillingOverview: React.FC<BillingOverviewProps> = ({ 
  charges, 
  paymentMethods = [], 
  compact = false,
  onDataUpdate,
  patientData
}) => {
  const [processedCharges, setProcessedCharges] = useState<Charge[]>(charges);
  const [lastUpdateTimestamp, setLastUpdateTimestamp] = useState<number>(Date.now());

  // 🔥 ENHANCED: More robust effect to handle scheduled payments and sync updates
  useEffect(() => {
    const processScheduledPayments = () => {
      const today = new Date();
      today.setHours(0, 0, 0, 0);
      
      let hasChanges = false;
      const updatedCharges = charges.map(charge => {
        if (charge.scheduledPaymentDate && charge.totalOutstanding > 0) {
          const scheduledDate = new Date(charge.scheduledPaymentDate);
          scheduledDate.setHours(0, 0, 0, 0);
          
          // If scheduled date is today or in the past, simulate auto-payment
          if (scheduledDate <= today && charge.autoPayEnabled) {
            const paymentAmount = charge.scheduledPaymentAmount || charge.totalOutstanding;
            
            // Create new payment record
            const newPayment = {
              id: `auto_pmt_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
              amount: paymentAmount,
              createdDate: new Date().toISOString(),
              paymentMethod: charge.scheduledPaymentMethod,
              paymentMedium: "SCHEDULED_AUTO_PAY",
              refunds: []
            };

            // Update charge status
            const newOutstanding = Math.max(0, charge.totalOutstanding - paymentAmount);
            const newStatus = newOutstanding === 0 ? "PAID" : "PARTIALLY_PAID";

            hasChanges = true;
            return {
              ...charge,
              totalOutstanding: newOutstanding,
              status: newStatus,
              payments: [...charge.payments, newPayment],
              comment: `${charge.comment || ''} [Auto-payment processed on ${scheduledDate.toLocaleDateString()}]`.trim(),
              // Clear scheduled payment info after processing
              scheduledPaymentDate: undefined,
              scheduledPaymentAmount: undefined,
              scheduledPaymentMethod: undefined,
              autoPayEnabled: undefined
            };
          }
        }
        return charge;
      });

      // 🔥 NEW: Always update processedCharges to reflect latest data, even if no auto-payments processed
      setProcessedCharges(updatedCharges);
      setLastUpdateTimestamp(Date.now());

      // If actual auto-payments were processed, update parent component
      if (hasChanges && onDataUpdate && patientData) {
        const updatedPatientData = {
          ...patientData,
          charges: updatedCharges
        };
        onDataUpdate(updatedPatientData);
      }
    };

    processScheduledPayments();
  }, [charges, onDataUpdate, patientData]); // 🔥 CRITICAL: React to charges prop changes

  // 🔥 NEW: Additional effect to handle real-time updates from Quick Actions
  useEffect(() => {
    // Force re-render when charges prop changes (e.g., from QuickActions scheduling)
    setProcessedCharges(charges);
    setLastUpdateTimestamp(Date.now());
  }, [charges]);

  // 🔥 NEW: Helper functions for enhanced scheduled payment analysis
  const getScheduledPaymentStatus = (charge: Charge) => {
    if (!charge.scheduledPaymentDate) return null;
    
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    const scheduledDate = new Date(charge.scheduledPaymentDate);
    scheduledDate.setHours(0, 0, 0, 0);
    
    const daysDiff = Math.ceil((scheduledDate.getTime() - today.getTime()) / (1000 * 60 * 60 * 24));
    
    if (daysDiff < 0) {
      return { 
        status: 'overdue', 
        text: `Scheduled payment was ${Math.abs(daysDiff)} day${Math.abs(daysDiff) !== 1 ? 's' : ''} ago`, 
        color: 'bg-red-100 text-red-800 border-red-200',
        urgency: 'high'
      };
    } else if (daysDiff === 0) {
      return { 
        status: 'today', 
        text: 'Scheduled payment today', 
        color: 'bg-blue-100 text-blue-800 border-blue-200',
        urgency: 'high'
      };
    } else if (daysDiff === 1) {
      return { 
        status: 'tomorrow', 
        text: 'Scheduled payment tomorrow', 
        color: 'bg-yellow-100 text-yellow-800 border-yellow-200',
        urgency: 'medium'
      };
    } else if (daysDiff <= 7) {
      return { 
        status: 'this-week', 
        text: `Scheduled payment in ${daysDiff} days`, 
        color: 'bg-green-100 text-green-800 border-green-200',
        urgency: 'low'
      };
    } else {
      return { 
        status: 'future', 
        text: `Scheduled payment on ${scheduledDate.toLocaleDateString()}`, 
        color: 'bg-gray-100 text-gray-800 border-gray-200',
        urgency: 'low'
      };
    }
  };

  const getScheduledPaymentsStats = () => {
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    
    const scheduledCharges = processedCharges.filter(charge => 
      charge.scheduledPaymentDate && charge.totalOutstanding > 0
    );
    
    const upcomingPayments = scheduledCharges.filter(charge => {
      const scheduledDate = new Date(charge.scheduledPaymentDate!);
      scheduledDate.setHours(0, 0, 0, 0);
      return scheduledDate > today;
    });
    
    const todayPayments = scheduledCharges.filter(charge => {
      const scheduledDate = new Date(charge.scheduledPaymentDate!);
      scheduledDate.setHours(0, 0, 0, 0);
      return scheduledDate.getTime() === today.getTime();
    });

    const thisWeekPayments = scheduledCharges.filter(charge => {
      const scheduledDate = new Date(charge.scheduledPaymentDate!);
      scheduledDate.setHours(0, 0, 0, 0);
      const daysDiff = (scheduledDate.getTime() - today.getTime()) / (1000 * 60 * 60 * 24);
      return daysDiff >= 0 && daysDiff <= 7;
    });

    const totalScheduledAmount = scheduledCharges.reduce((sum, charge) => 
      sum + (charge.scheduledPaymentAmount || charge.totalOutstanding), 0
    );

    const autoPayCount = scheduledCharges.filter(charge => charge.autoPayEnabled).length;

    return {
      total: scheduledCharges.length,
      upcoming: upcomingPayments.length,
      today: todayPayments.length,
      thisWeek: thisWeekPayments.length,
      totalAmount: totalScheduledAmount,
      autoPayCount,
      charges: scheduledCharges
    };
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'PAID':
        return 'bg-green-100 text-green-800 border-green-200';
      case 'PARTIALLY_PAID':
        return 'bg-yellow-100 text-yellow-800 border-yellow-200';
      case 'UNPAID':
        return 'bg-red-100 text-red-800 border-red-200';
      default:
        return 'bg-gray-100 text-gray-800 border-gray-200';
    }
  };

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'PAID':
        return <CheckCircle className="w-4 h-4" />;
      case 'PARTIALLY_PAID':
      case 'UNPAID':
        return <AlertTriangle className="w-4 h-4" />;
      default:
        return <DollarSign className="w-4 h-4" />;
    }
  };

  const totalOutstanding = processedCharges.reduce((sum, charge) => sum + charge.totalOutstanding, 0);
  const totalPaid = processedCharges.reduce((sum, charge) => sum + (charge.total - charge.totalOutstanding), 0);
  const scheduledStats = getScheduledPaymentsStats();

  if (processedCharges.length === 0) {
    return (
      <div className="text-center py-8">
        <DollarSign className="w-12 h-12 text-gray-400 mx-auto mb-4" />
        <p className="text-gray-500">No charges found</p>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* 🔥 NEW: Real-time Update Indicator */}
      {!compact && (
        <div className="flex items-center justify-between text-xs text-gray-500 mb-4">
          <span>Last updated: {new Date(lastUpdateTimestamp).toLocaleTimeString()}</span>
          {scheduledStats.total > 0 && (
            <span className="flex items-center space-x-1">
              <Calendar className="w-3 h-3" />
              <span>{scheduledStats.total} scheduled payment{scheduledStats.total !== 1 ? 's' : ''}</span>
            </span>
          )}
        </div>
      )}

      {/* Enhanced Summary Cards with Real-time Scheduled Payments */}
      {!compact && (
        <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
          <div className="bg-blue-50 border border-blue-200 p-4 rounded-lg">
            <div className="flex items-center space-x-2 mb-2">
              <CheckCircle className="w-5 h-5 text-blue-600" />
              <span className="text-blue-600 font-medium">Total Paid</span>
            </div>
            <p className="text-lg font-bold text-blue-900">${totalPaid.toFixed(2)}</p>
          </div>

          <div className="bg-red-50 border border-red-200 p-4 rounded-lg">
            <div className="flex items-center space-x-2 mb-2">
              <AlertTriangle className="w-5 h-5 text-red-600" />
              <span className="text-red-600 font-medium">Outstanding</span>
            </div>
            <p className="text-lg font-bold text-red-900">${totalOutstanding.toFixed(2)}</p>
          </div>

          {/* 🔥 ENHANCED: Scheduled Payments Summary with Real-time Updates */}
          <div className="bg-purple-50 border border-purple-200 p-4 rounded-lg relative">
            <div className="flex items-center space-x-2 mb-2">
              <Calendar className="w-5 h-5 text-purple-600" />
              <span className="text-purple-600 font-medium">Scheduled</span>
              {scheduledStats.today > 0 && (
                <div className="absolute -top-1 -right-1 bg-red-500 text-white rounded-full w-4 h-4 flex items-center justify-center text-xs font-bold">
                  {scheduledStats.today}
                </div>
              )}
            </div>
            <p className="text-lg font-bold text-purple-900">${scheduledStats.totalAmount.toFixed(2)}</p>
            <div className="flex items-center justify-between text-xs text-purple-700 mt-1">
              <span>{scheduledStats.total} payment{scheduledStats.total !== 1 ? 's' : ''}</span>
              {scheduledStats.autoPayCount > 0 && (
                <span className="flex items-center space-x-1">
                  <Zap className="w-3 h-3" />
                  <span>{scheduledStats.autoPayCount} auto</span>
                </span>
              )}
            </div>
          </div>

          <div className="bg-gray-50 border border-gray-200 p-4 rounded-lg">
            <div className="flex items-center space-x-2 mb-2">
              <CreditCard className="w-5 h-5 text-gray-600" />
              <span className="text-gray-600 font-medium">Payment Methods</span>
            </div>
            <p className="text-2xl font-bold text-gray-900">{paymentMethods.length}</p>
          </div>
        </div>
      )}

      {/* 🔥 ENHANCED: Dynamic Scheduled Payments Alert Bar */}
      {scheduledStats.today > 0 && (
        <div className="bg-blue-50 border-l-4 border-blue-400 p-4 rounded-r-lg animate-pulse">
          <div className="flex items-center">
            <Zap className="w-5 h-5 text-blue-400 mr-2" />
            <div>
              <p className="text-sm font-medium text-blue-800">
                🔄 Auto-Payment Processing Today
              </p>
              <p className="text-xs text-blue-700 mt-1">
                {scheduledStats.today} scheduled payment{scheduledStats.today !== 1 ? 's' : ''} will be processed automatically today
              </p>
            </div>
          </div>
        </div>
      )}

      {/* 🔥 NEW: This Week's Scheduled Payments Preview */}
      {scheduledStats.thisWeek > 0 && (
        <div className="bg-purple-50 border border-purple-200 rounded-lg p-4">
          <div className="flex items-center justify-between mb-3">
            <div className="flex items-center space-x-2">
              <TrendingUp className="w-5 h-5 text-purple-600" />
              <h4 className="text-sm font-bold text-purple-900">This Week's Scheduled Payments</h4>
            </div>
            <span className="bg-purple-100 text-purple-800 px-2 py-1 rounded-full text-xs font-medium">
              {scheduledStats.thisWeek} payment{scheduledStats.thisWeek !== 1 ? 's' : ''}
            </span>
          </div>
          
          <div className="space-y-2">
            {scheduledStats.charges
              .filter(charge => {
                const scheduledDate = new Date(charge.scheduledPaymentDate!);
                const today = new Date();
                today.setHours(0, 0, 0, 0);
                scheduledDate.setHours(0, 0, 0, 0);
                const daysDiff = (scheduledDate.getTime() - today.getTime()) / (1000 * 60 * 60 * 24);
                return daysDiff >= 0 && daysDiff <= 7;
              })
              .sort((a, b) => new Date(a.scheduledPaymentDate!).getTime() - new Date(b.scheduledPaymentDate!).getTime())
              .slice(0, 3)
              .map(charge => {
                const scheduledStatus = getScheduledPaymentStatus(charge);
                return (
                  <div key={charge.id} className="bg-white rounded-lg p-3 border border-purple-100">
                    <div className="flex items-center justify-between">
                      <div>
                        <p className="text-sm font-medium text-gray-900">{charge.description}</p>
                        <p className="text-xs text-gray-600">
                          {new Date(charge.scheduledPaymentDate!).toLocaleDateString()} at{' '}
                          {new Date(charge.scheduledPaymentDate!).toLocaleTimeString()}
                        </p>
                      </div>
                      <div className="text-right">
                        <p className="text-sm font-bold text-purple-900">
                          ${(charge.scheduledPaymentAmount || charge.totalOutstanding).toFixed(2)}
                        </p>
                        {scheduledStatus && (
                          <span className={`inline-block px-2 py-0.5 rounded-full text-xs font-medium ${scheduledStatus.color}`}>
                            {scheduledStatus.text}
                          </span>
                        )}
                      </div>
                    </div>
                  </div>
                );
              })}
            
            {scheduledStats.thisWeek > 3 && (
              <div className="text-center py-2">
                <span className="text-xs text-purple-600 font-medium">
                  +{scheduledStats.thisWeek - 3} more scheduled payment{scheduledStats.thisWeek - 3 !== 1 ? 's' : ''}
                </span>
              </div>
            )}
          </div>
        </div>
      )}

      {/* Charges List with Enhanced Scheduling Information */}
      <div className="space-y-4">
        {processedCharges.map((charge) => {
          const scheduledStatus = getScheduledPaymentStatus(charge);
          
          return (
            <div
              key={charge.id}
              className="bg-gray-50 border border-gray-200 rounded-lg p-5 hover:bg-gray-100 transition-colors"
            >
              {/* Header */}
              <div className="flex items-center justify-between mb-4">
                <h3 className="font-semibold text-gray-900 text-lg">{charge.description}</h3>
                <div className="flex items-center space-x-2">
                  <span className={`inline-flex items-center px-3 py-1 rounded-full text-sm font-medium border ${getStatusColor(charge.status)}`}>
                    {getStatusIcon(charge.status)}
                    <span className="ml-2">{charge.status.replace('_', ' ')}</span>
                  </span>
                  
                  {/* 🔥 ENHANCED: Scheduled Payment Badge with Status Indication */}
                  {scheduledStatus && (
                    <span className={`inline-flex items-center px-3 py-1 rounded-full text-xs font-medium border ${scheduledStatus.color} ${
                      scheduledStatus.urgency === 'high' ? 'animate-pulse' : ''
                    }`}>
                      <Calendar className="w-3 h-3 mr-1" />
                      {scheduledStatus.text}
                      {charge.autoPayEnabled && (
                        <Zap className="w-3 h-3 ml-1" />
                      )}
                    </span>
                  )}
                </div>
              </div>

              {/* Financial Details */}
              <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-4">
                <div className="text-center bg-white p-3 rounded-lg border">
                  <p className="text-sm text-gray-500 mb-1">Total Amount</p>
                  <p className="text-xl font-bold text-gray-900">${charge.total.toFixed(2)}</p>
                </div>
                <div className="text-center bg-white p-3 rounded-lg border">
                  <p className="text-sm text-gray-500 mb-1">Outstanding</p>
                  <p className={`text-xl font-bold ${charge.totalOutstanding > 0 ? 'text-red-600' : 'text-green-600'}`}>
                    ${charge.totalOutstanding.toFixed(2)}
                  </p>
                </div>
                <div className="text-center bg-white p-3 rounded-lg border">
                  <p className="text-sm text-gray-500 mb-1">Paid</p>
                  <p className="text-xl font-bold text-green-600">
                    ${(charge.total - charge.totalOutstanding).toFixed(2)}
                  </p>
                </div>
                <div className="text-center bg-white p-3 rounded-lg border">
                  <p className="text-sm text-gray-500 mb-1">Service Date</p>
                  <p className="text-sm font-medium text-gray-900">
                    {new Date(charge.createdDate).toLocaleDateString()}
                  </p>
                </div>
              </div>

              {/* 🔥 ENHANCED: Scheduled Payment Details with Real-time Updates */}
              {charge.scheduledPaymentDate && (
                <div className="bg-purple-50 border border-purple-200 rounded-lg p-4 mb-4">
                  <div className="flex items-center justify-between">
                    <div className="flex items-center space-x-4">
                      <div className="p-2 bg-purple-100 rounded-lg">
                        <Calendar className="w-5 h-5 text-purple-600" />
                      </div>
                      <div>
                        <h4 className="text-sm font-bold text-purple-900">Scheduled Payment</h4>
                        <p className="text-xs text-purple-700">
                          {new Date(charge.scheduledPaymentDate).toLocaleDateString()} at {new Date(charge.scheduledPaymentDate).toLocaleTimeString()}
                        </p>
                        {charge.scheduledPaymentMethod && (
                          <p className="text-xs text-purple-600">
                            {charge.scheduledPaymentMethod.brand} ****{charge.scheduledPaymentMethod.last4}
                          </p>
                        )}
                        {scheduledStatus && scheduledStatus.urgency === 'high' && (
                          <p className="text-xs font-bold text-purple-800 mt-1">
                            ⚡ {scheduledStatus.status === 'today' ? 'Processing today!' : 'Overdue!'}
                          </p>
                        )}
                      </div>
                    </div>
                    <div className="text-right">
                      <div className="bg-purple-100 px-3 py-1 rounded-lg">
                        <p className="text-xs text-purple-600 font-medium">Amount</p>
                        <p className="text-lg font-bold text-purple-900">
                          ${(charge.scheduledPaymentAmount || charge.totalOutstanding).toFixed(2)}
                        </p>
                      </div>
                    </div>
                  </div>
                  
                  <div className="mt-3 flex items-center justify-between">
                    <div className="flex items-center space-x-4">
                      {charge.autoPayEnabled && (
                        <div className="flex items-center space-x-2">
                          <Zap className="w-4 h-4 text-green-600" />
                          <span className="text-xs font-medium text-green-700">Auto-payment enabled</span>
                        </div>
                      )}
                      
                      {scheduledStatus && (
                        <span className={`px-2 py-1 rounded-full text-xs font-medium ${scheduledStatus.color}`}>
                          {scheduledStatus.text}
                        </span>
                      )}
                    </div>
                    
                    <div className="text-xs text-purple-600">
                      Updated: {new Date(lastUpdateTimestamp).toLocaleTimeString()}
                    </div>
                  </div>
                </div>
              )}

              {/* Metadata */}
              <div className="flex items-center justify-between text-sm text-gray-600 bg-white p-3 rounded-lg border">
                <div className="flex items-center space-x-4">
                  <div className="flex items-center space-x-1">
                    <Calendar className="w-4 h-4" />
                    <span>Created: {new Date(charge.createdDate).toLocaleDateString()}</span>
                  </div>
                  <div className="flex items-center space-x-1">
                    <User className="w-4 h-4" />
                    <span>Provider: {charge.creator.firstName} {charge.creator.lastName}</span>
                  </div>
                </div>
                
                {charge.locationName && (
                  <span className="bg-gray-100 px-2 py-1 rounded text-xs">
                    {charge.locationName}
                  </span>
                )}
              </div>

              {/* Comment */}
              {charge.comment && (
                <div className="mt-3 p-3 bg-blue-50 rounded-lg border border-blue-200">
                  <p className="text-sm text-blue-800 italic">💬 {charge.comment}</p>
                </div>
              )}
            </div>
          );
        })}
      </div>

      {/* 🔥 NEW: Summary Footer for Scheduled Payments */}
      {scheduledStats.total > 0 && !compact && (
        <div className="bg-gradient-to-r from-purple-50 to-pink-50 border border-purple-200 rounded-lg p-4">
          <div className="flex items-center justify-between">
            <div>
              <h4 className="text-sm font-bold text-purple-900">Scheduled Payments Summary</h4>
              <p className="text-xs text-purple-700">
                {scheduledStats.total} total • {scheduledStats.autoPayCount} auto-pay enabled • ${scheduledStats.totalAmount.toFixed(2)} total amount
              </p>
            </div>
            <div className="flex items-center space-x-2 text-xs text-purple-600">
              <Clock className="w-4 h-4" />
              <span>Next sync: {new Date(lastUpdateTimestamp + 60000).toLocaleTimeString()}</span>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default BillingOverview;

================
File: components/NotesTimeline.tsx
================
import React from 'react';
import { FileText, MessageCircle, Clock, User } from 'lucide-react';
import { DoctorNote, Memo } from '../types/patient';

interface NotesTimelineProps {
  notes: DoctorNote[];
  memos: Memo[];
}

interface TimelineItem {
  id: string;
  type: 'note' | 'memo';
  date: string;
  content: string;
  author: string;
  title?: string;
  summary?: string;
}

const NotesTimeline: React.FC<NotesTimelineProps> = ({ notes, memos }) => {
  // Combine and sort notes and memos by date
  const timelineItems: TimelineItem[] = [
    ...notes.map(note => ({
      id: note.id,
      type: 'note' as const,
      date: note.createdDate,
      content: note.content,
      summary: note.summary,
      author: note.providerNames.join(', '),
      title: `Doctor's Note - ${new Date(note.createdDate).toLocaleDateString()}`
    })),
    ...memos.map(memo => ({
      id: memo.id,
      type: 'memo' as const,
      date: memo.createdDate,
      content: memo.note,
      author: `${memo.creator.firstName} ${memo.creator.lastName}`,
      title: `Memo - ${new Date(memo.createdDate).toLocaleDateString()}`
    }))
  ].sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());

  if (timelineItems.length === 0) {
    return (
      <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
        <h2 className="text-lg font-semibold text-gray-900 mb-4">Notes & Memos</h2>
        <div className="text-center py-8">
          <FileText className="w-12 h-12 text-gray-400 mx-auto mb-4" />
          <p className="text-gray-500">No notes or memos found</p>
        </div>
      </div>
    );
  }

  return (
    <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
      <h2 className="text-lg font-semibold text-gray-900 mb-6">Notes & Memos</h2>
      
      <div className="space-y-6">
        {timelineItems.map((item, index) => (
          <div key={item.id} className="relative">
            {/* Timeline line */}
            {index < timelineItems.length - 1 && (
              <div className="absolute left-6 top-12 w-0.5 h-full bg-gray-200"></div>
            )}
            
            <div className="flex space-x-4">
              {/* Icon */}
              <div className={`flex-shrink-0 w-12 h-12 rounded-full flex items-center justify-center ${
                item.type === 'note' 
                  ? 'bg-blue-100 text-blue-600' 
                  : 'bg-green-100 text-green-600'
              }`}>
                {item.type === 'note' ? (
                  <FileText className="w-6 h-6" />
                ) : (
                  <MessageCircle className="w-6 h-6" />
                )}
              </div>
              
              {/* Content */}
              <div className="flex-1 min-w-0">
                <div className="bg-gray-50 rounded-lg p-4">
                  <div className="flex items-center justify-between mb-2">
                    <h3 className="font-medium text-gray-900">{item.title}</h3>
                    <div className="flex items-center space-x-2 text-sm text-gray-500">
                      <User className="w-4 h-4" />
                      <span>{item.author}</span>
                    </div>
                  </div>
                  
                  <div className="flex items-center space-x-2 mb-3 text-sm text-gray-500">
                    <Clock className="w-4 h-4" />
                    <span>{new Date(item.date).toLocaleString()}</span>
                  </div>

                  {item.summary && (
                    <div className="mb-3 p-3 bg-blue-50 rounded-md">
                      <p className="text-sm font-medium text-blue-900 mb-1">Summary:</p>
                      <p className="text-sm text-blue-800">{item.summary}</p>
                    </div>
                  )}
                  
                  <div className="prose prose-sm max-w-none">
                    <p className="text-gray-700 whitespace-pre-wrap">{item.content}</p>
                  </div>
                </div>
              </div>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};

export default NotesTimeline;

================
File: components/PatientHeaderCard.tsx
================
import React from 'react';
import { User, Phone, Mail, MapPin, Calendar, Activity, Weight, Ruler, AlertTriangle, Pill, Heart, Users } from 'lucide-react';
import { Patient, Measurement } from '../types/patient';

interface PatientHeaderCardProps {
  patient: Patient;
}

const PatientHeaderCard: React.FC<PatientHeaderCardProps> = ({ patient }) => {
  const age = new Date().getFullYear() - new Date(patient.dateOfBirth).getFullYear();

  const getLatestMeasurement = (type: string) => {
    return patient.measurements
      .filter(m => m.type === type)
      .sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime())[0];
  };

  const weight = getLatestMeasurement('WEIGHT');
  const height = getLatestMeasurement('HEIGHT');
  const bp = getLatestMeasurement('BLOOD_PRESSURE');

  const calculateBMI = () => {
    if (!weight || !height) return null;
    
    const weightValue = typeof weight.value === 'number' ? weight.value : parseFloat(weight.value.toString());
    const heightValue = typeof height.value === 'number' ? height.value : parseFloat(height.value.toString());
    
    if (isNaN(weightValue) || isNaN(heightValue) || weightValue <= 0 || heightValue <= 0) {
      return null;
    }
    
    const weightKg = weightValue * 0.453592; // Convert lbs to kg
    const heightM = heightValue * 0.0254; // Convert inches to meters
    return (weightKg / (heightM * heightM)).toFixed(1);
  };

  const bmi = calculateBMI();

  return (
    <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
      <div className="flex items-start space-x-6 mb-6">
        {/* Avatar */}
        <div className="flex-shrink-0">
          <div className="w-20 h-20 bg-gradient-to-br from-blue-500 to-purple-600 rounded-full flex items-center justify-center">
            <User className="w-10 h-10 text-white" />
          </div>
        </div>

        {/* Patient Info */}
        <div className="flex-1 min-w-0">
          <div className="flex items-center justify-between">
            <div>
              <h1 className="text-2xl font-bold text-gray-900">
                {patient.firstName} {patient.lastName}
              </h1>
              <p className="text-sm text-gray-500">
                {patient.gender} • {age} years old • ID: {patient.id.slice(-8)}
              </p>
            </div>
            <div className="flex items-center space-x-2">
              <span className={`px-3 py-1 rounded-full text-sm font-medium ${
                patient.isOnboardingComplete 
                  ? 'bg-green-100 text-green-800' 
                  : 'bg-yellow-100 text-yellow-800'
              }`}>
                {patient.isOnboardingComplete ? 'Active' : 'Onboarding'}
              </span>
            </div>
          </div>

          {/* Contact Info */}
          <div className="mt-4 grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
            <div className="flex items-center space-x-2">
              <Phone className="w-4 h-4 text-gray-400" />
              <span className="text-sm text-gray-600">{patient.phoneNumber}</span>
            </div>
            <div className="flex items-center space-x-2">
              <Mail className="w-4 h-4 text-gray-400" />
              <span className="text-sm text-gray-600">{patient.email}</span>
            </div>
            <div className="flex items-center space-x-2">
              <MapPin className="w-4 h-4 text-gray-400" />
              <span className="text-sm text-gray-600">
                {patient.city}, {patient.state} {patient.zipCode}
              </span>
            </div>
            <div className="flex items-center space-x-2">
              <Calendar className="w-4 h-4 text-gray-400" />
              <span className="text-sm text-gray-600">
                DOB: {new Date(patient.dateOfBirth).toLocaleDateString()}
              </span>
            </div>
          </div>
        </div>
      </div>

      {/* Vital Signs Section */}
      <div className="border-t border-gray-200 pt-4 mb-6">
        <div className="flex items-center justify-between mb-4">
          <h3 className="text-lg font-semibold text-gray-900">Vital Signs</h3>
          {weight && (
            <span className="text-xs text-gray-400">
              Last updated: {new Date(weight.date).toLocaleDateString()}
            </span>
          )}
        </div>
        
        <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
          {/* Weight */}
          <div className="flex items-center space-x-3 bg-gray-50 p-3 rounded-lg">
            <div className="p-2 bg-blue-100 rounded-lg">
              <Weight className="w-5 h-5 text-blue-600" />
            </div>
            <div>
              <p className="text-sm text-gray-500">Weight</p>
              <p className="text-lg font-semibold text-gray-900">
                {weight ? `${weight.value} ${weight.unit}` : 'N/A'}
              </p>
            </div>
          </div>

          {/* Height */}
          <div className="flex items-center space-x-3 bg-gray-50 p-3 rounded-lg">
            <div className="p-2 bg-green-100 rounded-lg">
              <Ruler className="w-5 h-5 text-green-600" />
            </div>
            <div>
              <p className="text-sm text-gray-500">Height</p>
              <p className="text-lg font-semibold text-gray-900">
                {height ? `${height.value}"` : 'N/A'}
              </p>
            </div>
          </div>

          {/* BMI */}
          <div className="flex items-center space-x-3 bg-gray-50 p-3 rounded-lg">
            <div className="p-2 bg-purple-100 rounded-lg">
              <Activity className="w-5 h-5 text-purple-600" />
            </div>
            <div>
              <p className="text-sm text-gray-500">BMI</p>
              <p className="text-lg font-semibold text-gray-900">
                {bmi || 'N/A'}
              </p>
            </div>
          </div>

          {/* Blood Pressure */}
          <div className="flex items-center space-x-3 bg-gray-50 p-3 rounded-lg">
            <div className="p-2 bg-red-100 rounded-lg">
              <Activity className="w-5 h-5 text-red-600" />
            </div>
            <div>
              <p className="text-sm text-gray-500">Blood Pressure</p>
              <p className="text-lg font-semibold text-gray-900">
                {bp ? `${bp.value} ${bp.unit}` : 'N/A'}
              </p>
            </div>
          </div>
        </div>
      </div>

      {/* 🔥 NEW: Medical Information Section */}
      <div className="border-t border-gray-200 pt-4">
        <h3 className="text-lg font-semibold text-gray-900 mb-4">Medical Information</h3>
        
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          {/* Allergies */}
          <div>
            <div className="flex items-center space-x-2 mb-3">
              <div className="p-1.5 bg-red-100 rounded-lg">
                <AlertTriangle className="w-4 h-4 text-red-500" />
              </div>
              <h4 className="font-medium text-gray-900">Allergies</h4>
            </div>
            {patient.allergies?.length > 0 ? (
              <div className="space-y-2">
                {patient.allergies.slice(0, 3).map((allergy, index) => (
                  <span
                    key={index}
                    className="inline-block bg-red-50 text-red-700 px-2 py-1 rounded-full text-xs mr-1 mb-1 border border-red-200"
                  >
                    {allergy}
                  </span>
                ))}
                {patient.allergies.length > 3 && (
                  <span className="inline-block bg-red-50 text-red-600 px-2 py-1 rounded-full text-xs font-medium border border-red-200">
                    +{patient.allergies.length - 3} more
                  </span>
                )}
              </div>
            ) : (
              <p className="text-gray-500 text-sm italic">No known allergies</p>
            )}
          </div>

          {/* Current Medications */}
          <div>
            <div className="flex items-center space-x-2 mb-3">
              <div className="p-1.5 bg-blue-100 rounded-lg">
                <Pill className="w-4 h-4 text-blue-500" />
              </div>
              <h4 className="font-medium text-gray-900">Current Medications</h4>
            </div>
            {patient.medications?.filter(med => med.active).length > 0 ? (
              <div className="space-y-2">
                {patient.medications.filter(med => med.active).slice(0, 2).map((med) => (
                  <div key={med.id} className="bg-blue-50 p-2 rounded-lg border border-blue-100">
                    <p className="font-medium text-blue-900 text-sm">{med.name}</p>
                    <p className="text-xs text-blue-700">{med.dosage} - {med.frequency}</p>
                  </div>
                ))}
                {patient.medications.filter(med => med.active).length > 2 && (
                  <div className="bg-blue-50 p-2 rounded-lg border border-blue-100 text-center">
                    <span className="text-xs text-blue-600 font-medium">
                      +{patient.medications.filter(med => med.active).length - 2} more medications
                    </span>
                  </div>
                )}
              </div>
            ) : (
              <p className="text-gray-500 text-sm italic">No current medications</p>
            )}
          </div>

          {/* Medical History */}
          <div>
            <div className="flex items-center space-x-2 mb-3">
              <div className="p-1.5 bg-green-100 rounded-lg">
                <Heart className="w-4 h-4 text-green-500" />
              </div>
              <h4 className="font-medium text-gray-900">Medical History</h4>
            </div>
            {patient.medicalHistory?.length > 0 ? (
              <div className="space-y-1">
                {patient.medicalHistory.slice(0, 3).map((condition, index) => (
                  <span
                    key={index}
                    className="inline-block bg-green-50 text-green-700 px-2 py-1 rounded-full text-xs mr-1 mb-1 border border-green-200"
                  >
                    {condition}
                  </span>
                ))}
                {patient.medicalHistory.length > 3 && (
                  <span className="inline-block bg-green-50 text-green-600 px-2 py-1 rounded-full text-xs font-medium border border-green-200">
                    +{patient.medicalHistory.length - 3} more
                  </span>
                )}
              </div>
            ) : (
              <p className="text-gray-500 text-sm italic">No medical history recorded</p>
            )}
          </div>

          {/* Family History */}
          <div>
            <div className="flex items-center space-x-2 mb-3">
              <div className="p-1.5 bg-purple-100 rounded-lg">
                <Users className="w-4 h-4 text-purple-500" />
              </div>
              <h4 className="font-medium text-gray-900">Family History</h4>
            </div>
            {patient.familyHistory?.length > 0 ? (
              <div className="space-y-1">
                {patient.familyHistory.slice(0, 3).map((condition, index) => (
                  <span
                    key={index}
                    className="inline-block bg-purple-50 text-purple-700 px-2 py-1 rounded-full text-xs mr-1 mb-1 border border-purple-200"
                  >
                    {condition}
                  </span>
                ))}
                {patient.familyHistory.length > 3 && (
                  <span className="inline-block bg-purple-50 text-purple-600 px-2 py-1 rounded-full text-xs font-medium border border-purple-200">
                    +{patient.familyHistory.length - 3} more
                  </span>
                )}
              </div>
            ) : (
              <p className="text-gray-500 text-sm italic">No family history recorded</p>
            )}
          </div>
        </div>

        {/* 🔥 Medical Summary Alert Bar (if critical allergies exist) */}
        {patient.allergies?.some(allergy => ['Penicillin', 'Sulfa', 'Latex', 'Shellfish'].includes(allergy)) && (
          <div className="mt-4 bg-red-50 border-l-4 border-red-400 p-3 rounded-r-lg">
            <div className="flex items-center">
              <AlertTriangle className="w-5 h-5 text-red-400 mr-2" />
              <div>
                <p className="text-sm font-medium text-red-800">
                  ⚠️ Critical Allergies Alert
                </p>
                <p className="text-xs text-red-700 mt-1">
                  Patient has documented allergies to: {patient.allergies.filter(allergy => 
                    ['Penicillin', 'Sulfa', 'Latex', 'Shellfish'].includes(allergy)
                  ).join(', ')}
                </p>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default PatientHeaderCard;

================
File: components/PatientProfile.tsx
================
// components/PatientProfile.tsx - Updated with Enhanced Appointments Support
import React, { useState, useMemo } from 'react';
import { ChevronDown, ChevronUp, AlertTriangle, Clock, DollarSign, FileText, Bell, Brain } from 'lucide-react';
import PatientHeaderCard from './PatientHeaderCard';
import AppointmentsTable from './AppointmentsTable';
import NotesTimeline from '../components/NotesTimeline';
import BillingOverview from '../components/BillingOverview';
import AlertsFeed from '../components/AlertsFeed';
import QuickActionsMenu from './QuickActionsMenu';
import AISummary from './AISummary';
import { PatientData } from '../types/patient';

interface PatientProfileProps {
  data: PatientData;
}

interface CollapsibleSection {
  id: string;
  title: string;
  icon: React.ComponentType<any>;
  shouldAutoExpand: boolean;
  hasNotification: boolean;
  notificationCount?: number;
  notificationColor: string;
  component: React.ReactNode;
}

const PatientProfile: React.FC<PatientProfileProps> = ({ data }) => {
  // 🔥 NEW: Manage patient data state locally to enable real-time updates
  const [patientData, setPatientData] = useState<PatientData>(data);
  
  // State for collapsed sections (true = collapsed, false = expanded)
  const [collapsedSections, setCollapsedSections] = useState<Record<string, boolean>>({});
  
  // State for dismissed alerts
  const [dismissedAlerts, setDismissedAlerts] = useState<Set<string>>(new Set());
  
  // State for AI summary view tracking
  const [aiSummaryViewed, setAiSummaryViewed] = useState(false);

  // 🔥 NEW: Handler to update patient data from child components
  const handlePatientDataUpdate = (updatedData: PatientData) => {
    setPatientData(updatedData);
    
    // Optional: Show success feedback to user
    console.log('Patient data updated successfully', {
      charges: updatedData.charges.length,
      alerts: updatedData.alerts.length,
      events: updatedData.events.length,
      memos: updatedData.memos.length,
      timestamp: new Date().toISOString()
    });
  };

  // Calculate section states using current patientData (not the original data prop)
  const sectionStates = useMemo(() => {
    // Filter out dismissed alerts
    const activeAlerts = patientData.alerts.filter(alert => !dismissedAlerts.has(alert.id));
    
    const outstandingBalance = patientData.charges.reduce((sum, charge) => sum + charge.totalOutstanding, 0);
    const upcomingAppointments = patientData.events.filter(event => {
      const eventDate = new Date(event.start);
      const now = new Date();
      const daysDiff = (eventDate.getTime() - now.getTime()) / (1000 * 3600 * 24);
      return daysDiff >= 0 && daysDiff <= 7 && (event.status === 'CONFIRMED' || event.status === 'RESCHEDULED');
    });
          const recentNotes = patientData.doctorsNotes.filter(note => {
      const noteDate = new Date(note.createdDate);
      const now = new Date();
      const hoursDiff = (now.getTime() - noteDate.getTime()) / (1000 * 3600);
      return hoursDiff <= 24;
    });

    return {
      alerts: {
        shouldAutoExpand: activeAlerts.length > 0,
        hasNotification: activeAlerts.length > 0,
        notificationCount: activeAlerts.filter(alert => alert.actionRequired).length,
        activeAlerts
      },
      aiSummary: {
        shouldAutoExpand: false, // Start collapsed to encourage viewing
        hasNotification: !aiSummaryViewed,
        notificationCount: 0
      },
      billing: {
        shouldAutoExpand: outstandingBalance > 0,
        hasNotification: outstandingBalance > 0,
        notificationCount: patientData.charges.filter(charge => charge.totalOutstanding > 0).length
      },
      appointments: {
        shouldAutoExpand: upcomingAppointments.length > 0,
        hasNotification: upcomingAppointments.length > 0,
        notificationCount: upcomingAppointments.length
      },
      notes: {
        shouldAutoExpand: recentNotes.length > 0,
        hasNotification: recentNotes.length > 0,
        notificationCount: recentNotes.length
      }
    };
  }, [patientData, dismissedAlerts, aiSummaryViewed]); // 🔥 CHANGED: Now depends on patientData instead of data

  const handleDismissAlert = (alertId: string) => {
    setDismissedAlerts(prev => {
      const newSet = new Set(prev);
      newSet.add(alertId);
      return newSet;
    });
  };

  const handleToggleAiSummary = () => {
    toggleSection('aiSummary');
  };

  // Mark as viewed when section is expanded
  React.useEffect(() => {
    const isCurrentlyExpanded = isExpanded('aiSummary', sectionStates.aiSummary.shouldAutoExpand);
    if (isCurrentlyExpanded && !aiSummaryViewed) {
      setAiSummaryViewed(true);
    }
  }, [collapsedSections, sectionStates.aiSummary.shouldAutoExpand, aiSummaryViewed]);

  const toggleSection = (sectionId: string) => {
    setCollapsedSections(prev => ({
      ...prev,
      [sectionId]: !prev[sectionId]
    }));
  };

  const isExpanded = (sectionId: string, shouldAutoExpand: boolean) => {
    // If user hasn't interacted with this section, use auto-expand logic
    if (!(sectionId in collapsedSections)) {
      return shouldAutoExpand;
    }
    // Otherwise use user preference
    return !collapsedSections[sectionId];
  };

  const sections: CollapsibleSection[] = [
    {
      id: 'billing',
      title: 'Billing Overview',
      icon: DollarSign,
      shouldAutoExpand: sectionStates.billing.shouldAutoExpand,
      hasNotification: sectionStates.billing.hasNotification,
      notificationCount: sectionStates.billing.notificationCount,
      notificationColor: 'bg-red-500',
      // 🔥 CHANGED: Now uses patientData instead of data
      component: <BillingOverview charges={patientData.charges} paymentMethods={patientData.paymentMethods} />
    },
    {
      id: 'appointments',
      title: 'Appointments',
      icon: Clock,
      shouldAutoExpand: sectionStates.appointments.shouldAutoExpand,
      hasNotification: sectionStates.appointments.hasNotification,
      notificationCount: sectionStates.appointments.notificationCount,
      notificationColor: 'bg-blue-500',
      // 🔥 ENHANCED: Now passes onDataUpdate and patientData for appointment actions
      component: (
        <div data-section="appointments">
          <AppointmentsTable 
            events={patientData.events} 
            onDataUpdate={handlePatientDataUpdate}
            patientData={patientData}
          />
        </div>
      )
    },
    {
      id: 'notes',
      title: 'Notes & Memos',
      icon: FileText,
      shouldAutoExpand: sectionStates.notes.shouldAutoExpand,
      hasNotification: sectionStates.notes.hasNotification,
      notificationCount: sectionStates.notes.notificationCount,
      notificationColor: 'bg-green-500',
      // 🔥 CHANGED: Now uses patientData instead of data
      component: <NotesTimeline notes={patientData.doctorsNotes} memos={patientData.memos} />
    }
  ];

  return (
    <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
      {/* Header - Uses patientData for consistency */}
      <div className="mb-8">
        <PatientHeaderCard patient={patientData.patient} />
      </div>

      {/* Quick Actions - 🔥 ENHANCED: Now includes onDataUpdate callback and passes full patientData */}
      <div className="mb-8">
        <QuickActionsMenu 
          patientData={patientData} 
          onDataUpdate={handlePatientDataUpdate}
        />
      </div>

      {/* Alerts - Always show if present, auto-expand */}
      {sectionStates.alerts.activeAlerts.length > 0 && (
        <div className="mb-8">
          <div className="bg-white rounded-lg shadow-sm border-l-4 border-red-500">
            <div
              className="flex items-center justify-between p-6 cursor-pointer hover:bg-gray-50"
              onClick={() => toggleSection('alerts')}
            >
              <div className="flex items-center space-x-3">
                <AlertTriangle className="w-5 h-5 text-red-500" />
                <h2 className="text-lg font-semibold text-gray-900">Active Alerts</h2>
                {sectionStates.alerts.hasNotification && (
                  <div className="flex items-center space-x-1">
                    <Bell className="w-4 h-4 text-red-500" />
                    <span className="bg-red-500 text-white px-2 py-0.5 rounded-full text-xs font-medium">
                      {sectionStates.alerts.notificationCount}
                    </span>
                  </div>
                )}
              </div>
              {isExpanded('alerts', sectionStates.alerts.shouldAutoExpand) ? (
                <ChevronUp className="w-5 h-5 text-gray-400" />
              ) : (
                <ChevronDown className="w-5 h-5 text-gray-400" />
              )}
            </div>
            {isExpanded('alerts', sectionStates.alerts.shouldAutoExpand) && (
              <div className="px-6 pb-6">
                <AlertsFeed 
                  alerts={sectionStates.alerts.activeAlerts} 
                  onDismissAlert={handleDismissAlert}
                />
              </div>
            )}
          </div>
        </div>
      )}

      {/* AI Summary - Collapsible with View Tracking */}
      <div className="mb-8">
        <div className={`bg-white rounded-lg shadow-sm border-l-4 ${
          !aiSummaryViewed ? 'border-orange-500' : 'border-purple-500'
        }`}>
          <div
            className="flex items-center justify-between p-6 cursor-pointer hover:bg-gray-50"
            onClick={handleToggleAiSummary}
          >
            <div className="flex items-center space-x-3">
              <Brain className={`w-5 h-5 ${
                !aiSummaryViewed ? 'text-orange-500' : 'text-purple-500'
              }`} />
              <h2 className="text-lg font-semibold text-gray-900">AI Patient Summary</h2>
              {!aiSummaryViewed && (
                <div className="flex items-center space-x-1">
                  <Bell className="w-4 h-4 text-orange-500" />
                  <span className="bg-orange-500 text-white px-2 py-0.5 rounded-full text-xs font-medium">
                    NEW
                  </span>
                </div>
              )}
            </div>
            
            <div className="flex items-center space-x-2">
              {isExpanded('aiSummary', sectionStates.aiSummary.shouldAutoExpand) ? (
                <span className="text-sm text-gray-600 font-medium">
                  {aiSummaryViewed ? 'Viewed ✓' : 'Viewing...'}
                </span>
              ) : (
                <span className={`text-sm font-medium px-3 py-1 rounded-full ${
                  !aiSummaryViewed 
                    ? 'bg-orange-100 text-orange-800 border border-orange-200' 
                    : 'bg-green-100 text-green-800 border border-green-200'
                }`}>
                  {!aiSummaryViewed ? '⚠️ NEED TO VIEW' : '✓ Viewed'}
                </span>
              )}
            </div>
          </div>
          {isExpanded('aiSummary', sectionStates.aiSummary.shouldAutoExpand) && (
            <div className="px-6 pb-6">
              {/* 🔥 CHANGED: Now uses patientData instead of data */}
              <AISummary data={patientData} />
            </div>
          )}
        </div>
      </div>

      {/* Main Content - Full Width Layout */}
      <div className="space-y-8">
        {/* Collapsible Sections - Full Width */}
        <div className="space-y-6">
          {sections.map((section) => {
            const expanded = isExpanded(section.id, section.shouldAutoExpand);
            const borderColor = section.hasNotification 
              ? section.notificationColor.replace('bg-', 'border-')
              : 'border-gray-200';

            return (
              <div key={section.id} className={`bg-white rounded-lg shadow-sm border-l-4 ${borderColor}`}>
                <div
                  className="flex items-center justify-between p-6 cursor-pointer hover:bg-gray-50 transition-colors"
                  onClick={() => toggleSection(section.id)}
                >
                  <div className="flex items-center space-x-3">
                    <section.icon className={`w-5 h-5 ${
                      section.hasNotification 
                        ? section.notificationColor.replace('bg-', 'text-')
                        : 'text-gray-600'
                    }`} />
                    <h2 className="text-lg font-semibold text-gray-900">{section.title}</h2>
                    {section.hasNotification && (
                      <div className="flex items-center space-x-1">
                        <Bell className={`w-4 h-4 ${section.notificationColor.replace('bg-', 'text-')}`} />
                        <span className={`${section.notificationColor} text-white px-2 py-0.5 rounded-full text-xs font-medium`}>
                          {section.notificationCount}
                        </span>
                      </div>
                    )}
                  </div>
                  {expanded ? (
                    <ChevronUp className="w-5 h-5 text-gray-400" />
                  ) : (
                    <ChevronDown className="w-5 h-5 text-gray-400" />
                  )}
                </div>
                
                {expanded && (
                  <div className="px-6 pb-6 border-t border-gray-100">
                    <div className="pt-4">
                      {section.component}
                    </div>
                  </div>
                )}
              </div>
            );
          })}
        </div>
      </div>
    </div>
  );
};

export default PatientProfile;

================
File: components/QuickActionsMenu.tsx
================
import React, { useState } from 'react';
import { CreditCard, FileText, Plus, DollarSign, Calendar, CreditCard as CardIcon, X, AlertTriangle, CheckCircle, Clock, Building, CalendarCheck, CalendarPlus } from 'lucide-react';
import { PatientData, Charge, Memo, PaymentMethod } from '../types/patient';

interface QuickActionsMenuProps {
  patientData: PatientData;
  onDataUpdate?: (updatedData: PatientData) => void;
}

const QuickActionsMenu: React.FC<QuickActionsMenuProps> = ({ patientData, onDataUpdate }) => {
  const [showChargeModal, setShowChargeModal] = useState(false);
  const [showMemoModal, setShowMemoModal] = useState(false);
  // 🔥 NEW: Schedule Payment Modal State
  const [showSchedulePaymentModal, setShowSchedulePaymentModal] = useState(false);
  const [selectedCharges, setSelectedCharges] = useState<string[]>([]);
  const [isProcessing, setIsProcessing] = useState(false);
  
  const [memoText, setMemoText] = useState('');
  const [isAddingMemo, setIsAddingMemo] = useState(false);

  // 🔥 NEW: Schedule Payment Form State
  const [scheduleForm, setScheduleForm] = useState({
    selectedChargeIds: [] as string[],
    scheduledDate: '',
    scheduledTime: '',
    paymentMethodId: '',
    autoPayEnabled: true,
    customAmount: false,
    amounts: {} as Record<string, number>
  });
  const [isSchedulingPayment, setIsSchedulingPayment] = useState(false);

  // Local state for charges to allow real-time updates - sync with patientData changes
  const [localCharges, setLocalCharges] = useState<Charge[]>(patientData.charges);
  const [localAlerts, setLocalAlerts] = useState(patientData.alerts);

  // Sync local state when patientData changes
  React.useEffect(() => {
    setLocalCharges(patientData.charges);
    setLocalAlerts(patientData.alerts);
  }, [patientData]);

  const getAppointmentStats = () => {
    const now = new Date();
    const upcomingAppointments = patientData.events.filter(event => {
      const eventDate = new Date(event.start);
      return eventDate > now && (event.status === 'CONFIRMED' || event.status === 'RESCHEDULED');
    });
    
    const nextAppointment = upcomingAppointments
      .sort((a, b) => new Date(a.start).getTime() - new Date(b.start).getTime())[0];
    
    const thisWeekAppointments = upcomingAppointments.filter(event => {
      const eventDate = new Date(event.start);
      const daysDiff = (eventDate.getTime() - now.getTime()) / (1000 * 3600 * 24);
      return daysDiff <= 7;
    });

    return {
      total: upcomingAppointments.length,
      thisWeek: thisWeekAppointments.length,
      next: nextAppointment
    };
  };

  const appointmentStats = getAppointmentStats();
  const defaultPaymentMethod = patientData.paymentMethods.find(pm => pm.isDefault);
  const outstandingCharges = localCharges.filter(charge => charge.totalOutstanding > 0);
  const totalOutstanding = outstandingCharges.reduce((sum, charge) => sum + charge.totalOutstanding, 0);

  // 🔥 NEW: Get charges eligible for scheduling (no existing scheduled payment)
  const eligibleChargesForScheduling = outstandingCharges.filter(charge => !charge.scheduledPaymentDate);

  const actions = [
    {
      icon: CalendarCheck,
      label: 'Appointments',
      description: appointmentStats.total > 0 
        ? `${appointmentStats.total} upcoming, ${appointmentStats.thisWeek} this week`
        : 'No upcoming appointments',
      onClick: () => {
        const appointmentsSection = document.querySelector('[data-section="appointments"]');
        if (appointmentsSection) {
          appointmentsSection.scrollIntoView({ behavior: 'smooth' });
        } else {
          if (appointmentStats.next) {
            alert(`📅 Next Appointment:\n\n${appointmentStats.next.title}\nDate: ${new Date(appointmentStats.next.start).toLocaleDateString()}\nTime: ${new Date(appointmentStats.next.start).toLocaleTimeString()}\nProvider: ${appointmentStats.next.organizer.firstName} ${appointmentStats.next.organizer.lastName}`);
          } else {
            alert('📅 No upcoming appointments scheduled.');
          }
        }
      },
      disabled: false,
      color: appointmentStats.thisWeek > 0 
        ? 'bg-gradient-to-br from-blue-500 to-indigo-600 hover:from-blue-600 hover:to-indigo-700'
        : appointmentStats.total > 0
        ? 'bg-gradient-to-br from-slate-500 to-gray-600 hover:from-slate-600 hover:to-gray-700'
        : 'bg-gradient-to-br from-gray-400 to-gray-500',
      textColor: 'text-white',
      badge: appointmentStats.thisWeek > 0 ? appointmentStats.thisWeek : undefined,
      badgeColor: 'bg-white text-blue-600'
    },
    {
      icon: CreditCard,
      label: 'Charge Card',
      description: defaultPaymentMethod ? `****${defaultPaymentMethod.last4}` : 'No default card',
      onClick: () => setShowChargeModal(true),
      disabled: !defaultPaymentMethod || totalOutstanding === 0,
      color: 'bg-gradient-to-br from-emerald-500 to-teal-600 hover:from-emerald-600 hover:to-teal-700',
      textColor: 'text-white'
    },
    // 🔥 NEW: Schedule Payment Action
    {
      icon: CalendarPlus,
      label: 'Schedule Payment',
      description: eligibleChargesForScheduling.length > 0 
        ? `${eligibleChargesForScheduling.length} charge${eligibleChargesForScheduling.length !== 1 ? 's' : ''} available`
        : 'No charges to schedule',
      onClick: () => setShowSchedulePaymentModal(true),
      disabled: eligibleChargesForScheduling.length === 0 || !defaultPaymentMethod,
      color: 'bg-gradient-to-br from-purple-500 to-pink-600 hover:from-purple-600 hover:to-pink-700',
      textColor: 'text-white',
      badge: eligibleChargesForScheduling.length > 0 ? eligibleChargesForScheduling.length : undefined,
      badgeColor: 'bg-white text-purple-600'
    },
    {
      icon: Plus,
      label: 'Add Memo',
      description: 'Quick note about patient',
      onClick: () => setShowMemoModal(true),
      disabled: false,
      color: 'bg-gradient-to-br from-violet-500 to-purple-600 hover:from-violet-600 hover:to-purple-700',
      textColor: 'text-white'
    },
    {
      icon: FileText,
      label: 'Generate Note',
      description: 'Create doctor\'s note',
      onClick: () => alert('Note generation feature coming soon!'),
      disabled: false,
      color: 'bg-gradient-to-br from-indigo-500 to-blue-600 hover:from-indigo-600 hover:to-blue-700',
      textColor: 'text-white'
    }
  ];

  // 🔥 NEW: Handle Schedule Payment Form Changes
  const handleScheduleFormChange = (field: string, value: any) => {
    setScheduleForm(prev => ({
      ...prev,
      [field]: value
    }));
  };

  const handleChargeAmountChange = (chargeId: string, amount: number) => {
    setScheduleForm(prev => ({
      ...prev,
      amounts: {
        ...prev.amounts,
        [chargeId]: amount
      }
    }));
  };

  const getScheduledTotal = () => {
    return scheduleForm.selectedChargeIds.reduce((total, chargeId) => {
      const charge = eligibleChargesForScheduling.find(c => c.id === chargeId);
      if (!charge) return total;
      
      if (scheduleForm.customAmount && scheduleForm.amounts[chargeId]) {
        return total + scheduleForm.amounts[chargeId];
      }
      return total + charge.totalOutstanding;
    }, 0);
  };

  // 🔥 NEW: Process Scheduled Payment
  const processSchedulePayment = async () => {
    if (scheduleForm.selectedChargeIds.length === 0 || !scheduleForm.scheduledDate || !scheduleForm.scheduledTime) {
      alert('Please fill in all required fields.');
      return;
    }

    setIsSchedulingPayment(true);

    // Simulate API delay
    await new Promise(resolve => setTimeout(resolve, 1500));

    const scheduledDateTime = new Date(`${scheduleForm.scheduledDate}T${scheduleForm.scheduledTime}`);
    const selectedPaymentMethod = patientData.paymentMethods.find(pm => pm.id === scheduleForm.paymentMethodId) || defaultPaymentMethod;

    // Update charges with scheduled payment information
    const updatedCharges = localCharges.map(charge => {
      if (scheduleForm.selectedChargeIds.includes(charge.id)) {
        const scheduledAmount = scheduleForm.customAmount && scheduleForm.amounts[charge.id] 
          ? scheduleForm.amounts[charge.id] 
          : charge.totalOutstanding;

        return {
          ...charge,
          scheduledPaymentDate: scheduledDateTime.toISOString(),
          scheduledPaymentAmount: scheduledAmount,
          scheduledPaymentMethod: selectedPaymentMethod,
          autoPayEnabled: scheduleForm.autoPayEnabled,
          comment: charge.comment 
            ? `${charge.comment} [Scheduled payment: ${scheduledDateTime.toLocaleDateString()} ${scheduledDateTime.toLocaleTimeString()}]`
            : `Scheduled payment: ${scheduledDateTime.toLocaleDateString()} ${scheduledDateTime.toLocaleTimeString()}`
        };
      }
      return charge;
    });

    // Create a memo about the scheduled payment
    const scheduledChargeDescriptions = scheduleForm.selectedChargeIds
      .map(chargeId => {
        const charge = eligibleChargesForScheduling.find(c => c.id === chargeId);
        return charge?.description || 'Unknown charge';
      })
      .join(', ');

    const newMemo: Memo = {
      id: `memo_schedule_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
      patient: {
        id: patientData.patient.id,
        firstName: patientData.patient.firstName,
        lastName: patientData.patient.lastName,
        email: patientData.patient.email,
        phoneNumber: patientData.patient.phoneNumber
      },
      note: `Scheduled payment setup: ${scheduleForm.selectedChargeIds.length} charge${scheduleForm.selectedChargeIds.length !== 1 ? 's' : ''} (${scheduledChargeDescriptions}) for ${scheduledDateTime.toLocaleDateString()} at ${scheduledDateTime.toLocaleTimeString()}. Total amount: $${getScheduledTotal().toFixed(2)}. Auto-pay: ${scheduleForm.autoPayEnabled ? 'Enabled' : 'Disabled'}.`,
      creator: {
        id: "usr_current_provider",
        firstName: "Current",
        lastName: "Provider",
        email: "provider@decodahealth.com"
      },
      createdDate: new Date().toISOString(),
      updatedDate: new Date().toISOString()
    };

    // 🔥 CRITICAL: Update patient data with new charges and memo
    const updatedPatientData: PatientData = {
      ...patientData,
      charges: updatedCharges,
      memos: [newMemo, ...patientData.memos]
    };

    // Update local state immediately for responsive UI
    setLocalCharges(updatedCharges);

    // 🔥 CRITICAL: Propagate changes to parent components via callback
    if (onDataUpdate) {
      onDataUpdate(updatedPatientData);
    }

    setIsSchedulingPayment(false);
    setShowSchedulePaymentModal(false);
    
    // Reset form
    setScheduleForm({
      selectedChargeIds: [],
      scheduledDate: '',
      scheduledTime: '',
      paymentMethodId: '',
      autoPayEnabled: true,
      customAmount: false,
      amounts: {}
    });

    // Success feedback
    alert(`✅ Payment Scheduled Successfully!\n\nCharges: ${scheduledChargeDescriptions}\nScheduled for: ${scheduledDateTime.toLocaleDateString()} at ${scheduledDateTime.toLocaleTimeString()}\nTotal Amount: $${getScheduledTotal().toFixed(2)}\nPayment Method: ${selectedPaymentMethod?.brand} ****${selectedPaymentMethod?.last4}\nAuto-pay: ${scheduleForm.autoPayEnabled ? 'Enabled' : 'Disabled'}\n\nThe scheduled payment information has been updated in the billing overview.`);
  };

  const handleChargeSelection = (chargeId: string) => {
    setSelectedCharges(prev => 
      prev.includes(chargeId) 
        ? prev.filter(id => id !== chargeId)
        : [...prev, chargeId]
    );
  };

  const getSelectedTotal = () => {
    return outstandingCharges
      .filter(charge => selectedCharges.includes(charge.id))
      .reduce((sum, charge) => sum + charge.totalOutstanding, 0);
  };

  const getChargeDetails = (charge: Charge) => {
    const hasPaymentPlan = charge.plannedPayments && charge.plannedPayments.length > 0;
    const daysOverdue = Math.floor((new Date().getTime() - new Date(charge.createdDate).getTime()) / (1000 * 3600 * 24));
    
    return {
      hasPaymentPlan,
      daysOverdue,
      isOverdue: daysOverdue > 30,
      nextPaymentDate: hasPaymentPlan && charge.plannedPayments ? charge.plannedPayments[0]?.paymentDate : null
    };
  };

  const handleAddMemo = async () => {
    if (!memoText.trim()) {
      alert('Please enter a memo before saving.');
      return;
    }
    
    setIsAddingMemo(true);
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    const newMemo: Memo = {
      id: `qn_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
      patient: {
        id: patientData.patient.id,
        firstName: patientData.patient.firstName,
        lastName: patientData.patient.lastName,
        email: patientData.patient.email,
        phoneNumber: patientData.patient.phoneNumber
      },
      note: memoText.trim(),
      creator: {
        id: "usr_current_provider",
        firstName: "Current",
        lastName: "Provider",
        email: "provider@decodahealth.com"
      },
      createdDate: new Date().toISOString(),
      updatedDate: new Date().toISOString()
    };

    const updatedPatientData: PatientData = {
      ...patientData,
      memos: [newMemo, ...patientData.memos]
    };

    if (onDataUpdate) {
      onDataUpdate(updatedPatientData);
    }

    setIsAddingMemo(false);
    setMemoText('');
    setShowMemoModal(false);
    
    alert(`✅ Memo Added Successfully!\n\nNote: "${memoText.substring(0, 50)}${memoText.length > 50 ? '...' : ''}"\nCreated: ${new Date().toLocaleString()}\n\nThe memo has been added to the patient's timeline.`);
  };

  const processPayment = async () => {
    if (selectedCharges.length === 0) return;
    
    setIsProcessing(true);
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    const selectedTotal = getSelectedTotal();
    const updatedCharges = localCharges.map(charge => {
      if (selectedCharges.includes(charge.id)) {
        const newPayment = {
          id: `pmt_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
          amount: charge.totalOutstanding,
          createdDate: new Date().toISOString(),
          paymentMethod: defaultPaymentMethod,
          paymentMedium: "CARD",
          refunds: []
        };

        const wasOnPaymentPlan = charge.plannedPayments && charge.plannedPayments.length > 0;
        const isPaidInFull = true;

        return {
          ...charge,
          totalOutstanding: 0,
          status: "PAID",
          payments: [...charge.payments, newPayment],
          plannedPayments: isPaidInFull ? [] : (charge.plannedPayments || []),
          comment: wasOnPaymentPlan && isPaidInFull 
            ? `Charge paid in full - payment plan cancelled. Original comment: ${charge.comment || 'None'}`
            : charge.comment
        };
      }
      return charge;
    });

    const paidChargeIds = selectedCharges;
    const updatedAlerts = localAlerts.filter(alert => {
      if (alert.type === 'OUTSTANDING_BALANCE') {
        const alertChargeIds = alert.data.charges?.map((c: any) => c.id) || [];
        const hasUnpaidCharges = alertChargeIds.some((id: string) => !paidChargeIds.includes(id));
        return hasUnpaidCharges;
      }
      return true;
    });

    setLocalCharges(updatedCharges);
    setLocalAlerts(updatedAlerts);
    
    if (onDataUpdate) {
      const updatedPatientData = {
        ...patientData,
        charges: updatedCharges,
        alerts: updatedAlerts
      };
      onDataUpdate(updatedPatientData);
    }

    setIsProcessing(false);
    setSelectedCharges([]);
    setShowChargeModal(false);
    
    const paymentPlanCharges = selectedCharges.filter(chargeId => {
      const charge = localCharges.find(c => c.id === chargeId);
      return charge?.plannedPayments && charge.plannedPayments.length > 0;
    });

    let successMessage = `✅ Payment Successful!\n\nProcessed: ${selectedTotal.toFixed(2)}\nCard: ${defaultPaymentMethod?.brand} ****${defaultPaymentMethod?.last4}\nDate: ${new Date().toLocaleString()}`;
    
    if (paymentPlanCharges.length > 0) {
      successMessage += `\n\n📋 Payment Plan Updates:\n${paymentPlanCharges.length} charge${paymentPlanCharges.length > 1 ? 's' : ''} with payment plans have been paid in full and marked as current. Payment plans have been cancelled.`;
    }

    const processedChargeNames = selectedCharges.map(chargeId => {
      const charge = localCharges.find(c => c.id === chargeId);
      return charge?.description || 'Unknown';
    }).join(', ');
    
    successMessage += `\n\n📄 Charges Updated:\n${processedChargeNames} - Status changed to PAID`;

    alert(successMessage);
  };

  return (
    <>
      <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
        <h2 className="text-lg font-semibold text-gray-900 mb-6">Quick Actions</h2>
        <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-5 gap-4">
          {actions.map((action, index) => (
            <button
              key={index}
              onClick={action.onClick}
              disabled={action.disabled}
              className={`relative p-4 rounded-xl transition-all duration-300 transform hover:scale-105 hover:-translate-y-1 ${
                action.disabled 
                  ? 'bg-gray-200 cursor-not-allowed !text-gray-500 shadow-sm' 
                  : `${action.color} !text-white shadow-lg hover:shadow-xl`
              }`}
              style={{
                boxShadow: action.disabled 
                  ? '0 1px 3px 0 rgb(0 0 0 / 0.1)' 
                  : '0 10px 25px -5px rgb(0 0 0 / 0.1), 0 8px 10px -6px rgb(0 0 0 / 0.1)'
              }}
            >
              {action.badge && !action.disabled && (
                <div className={`absolute -top-2 -right-2 ${action.badgeColor || 'bg-red-500 text-white'} rounded-full w-5 h-5 flex items-center justify-center text-xs font-bold border-2 border-white shadow-md`}>
                  {action.badge}
                </div>
              )}
              
              <action.icon className={`w-6 h-6 mx-auto mb-2 ${action.disabled ? '!text-gray-500' : '!text-white'}`} />
              <p className="font-bold text-sm mb-1 !text-current">{action.label}</p>
              <p className="text-xs opacity-90 leading-tight !text-current">{action.description}</p>
            </button>
          ))}
        </div>
      </div>

      {/* 🔥 NEW: Schedule Payment Modal */}
      {showSchedulePaymentModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50 backdrop-blur-sm">
          <div className="bg-white rounded-xl max-w-4xl w-full shadow-2xl max-h-[90vh] flex flex-col">
            {/* Header */}
            <div className="flex items-center justify-between p-6 border-b border-gray-200 bg-white rounded-t-xl">
              <div>
                <h3 className="text-2xl font-bold text-gray-900">Schedule Payment</h3>
                <p className="text-gray-600 mt-1">Set up future payments for outstanding charges</p>
              </div>
              <button
                onClick={() => setShowSchedulePaymentModal(false)}
                className="p-2 hover:bg-gray-100 rounded-full transition-colors"
                disabled={isSchedulingPayment}
              >
                <X className="w-6 h-6 text-gray-500" />
              </button>
            </div>

            {/* Scrollable Content */}
            <div className="flex-1 overflow-y-auto p-6" style={{scrollbarWidth: 'none', msOverflowStyle: 'none'}}>
              {/* Payment Method Section */}
              <div className="bg-purple-50 border border-purple-200 rounded-xl p-6 mb-6">
                <div className="flex items-center justify-between">
                  <div className="flex items-center space-x-4">
                    <div className="p-3 bg-purple-100 rounded-xl">
                      <CardIcon className="w-8 h-8 text-purple-600" />
                    </div>
                    <div>
                      <h4 className="text-lg font-bold text-purple-900">Payment Method</h4>
                      <div className="space-y-2">
                        {patientData.paymentMethods.map(method => (
                          <label key={method.id} className="flex items-center space-x-3 cursor-pointer">
                            <input
                              type="radio"
                              name="paymentMethod"
                              value={method.id}
                              checked={scheduleForm.paymentMethodId === method.id || (scheduleForm.paymentMethodId === '' && method.isDefault)}
                              onChange={(e) => handleScheduleFormChange('paymentMethodId', e.target.value)}
                              className="text-purple-600"
                              disabled={isSchedulingPayment}
                            />
                            <span className="text-sm text-purple-800">
                              {method.brand} ****{method.last4} {method.isDefault && '(Default)'}
                            </span>
                          </label>
                        ))}
                      </div>
                    </div>
                  </div>
                </div>
              </div>

              {/* Schedule Details */}
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Payment Date *
                  </label>
                  <input
                    type="date"
                    value={scheduleForm.scheduledDate}
                    onChange={(e) => handleScheduleFormChange('scheduledDate', e.target.value)}
                    min={new Date().toISOString().split('T')[0]}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                    disabled={isSchedulingPayment}
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Payment Time *
                  </label>
                  <input
                    type="time"
                    value={scheduleForm.scheduledTime}
                    onChange={(e) => handleScheduleFormChange('scheduledTime', e.target.value)}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                    disabled={isSchedulingPayment}
                  />
                </div>
              </div>

              {/* Auto-pay Toggle */}
              <div className="mb-6">
                <label className="flex items-center space-x-3 cursor-pointer">
                  <input
                    type="checkbox"
                    checked={scheduleForm.autoPayEnabled}
                    onChange={(e) => handleScheduleFormChange('autoPayEnabled', e.target.checked)}
                    className="text-purple-600 focus:ring-purple-500"
                    disabled={isSchedulingPayment}
                  />
                  <span className="text-sm font-medium text-gray-700">
                    Enable automatic payment processing (recommended)
                  </span>
                </label>
                <p className="text-xs text-gray-500 ml-6">
                  When enabled, payments will be processed automatically on the scheduled date and time.
                </p>
              </div>

              {/* Charge Selection */}
              <div className="mb-6">
                <div className="flex items-center justify-between mb-4">
                  <h4 className="text-xl font-bold text-gray-900">Select Charges to Schedule</h4>
                  <span className="bg-gray-100 text-gray-700 px-3 py-1 rounded-full text-sm font-medium">
                    {eligibleChargesForScheduling.length} available
                  </span>
                </div>

                <div className="space-y-4">
                  {eligibleChargesForScheduling.map((charge) => {
                    const isSelected = scheduleForm.selectedChargeIds.includes(charge.id);
                    
                    return (
                      <div
                        key={charge.id}
                        className={`border-2 rounded-xl p-6 cursor-pointer transition-all duration-200 ${
                          isSelected
                            ? 'border-purple-500 bg-purple-50 shadow-lg'
                            : 'border-gray-200 hover:border-gray-300 hover:shadow-md'
                        }`}
                        onClick={() => {
                          const newSelectedIds = isSelected
                            ? scheduleForm.selectedChargeIds.filter(id => id !== charge.id)
                            : [...scheduleForm.selectedChargeIds, charge.id];
                          handleScheduleFormChange('selectedChargeIds', newSelectedIds);
                        }}
                      >
                        <div className="flex items-start justify-between">
                          <div className="flex items-start space-x-4 flex-1">
                            <div className="mt-1">
                              <div 
                                className={`w-5 h-5 rounded border-2 cursor-pointer transition-all duration-200 flex items-center justify-center ${
                                  isSelected 
                                    ? 'bg-purple-600 border-purple-600' 
                                    : 'bg-white border-gray-300 hover:border-gray-400'
                                }`}
                              >
                                {isSelected && (
                                  <svg className="w-3 h-3 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={3} d="M5 13l4 4L19 7" />
                                  </svg>
                                )}
                              </div>
                            </div>
                            
                            <div className="flex-1">
                              <div className="flex items-center space-x-3 mb-3">
                                <h5 className="text-lg font-bold text-gray-900">{charge.description}</h5>
                                <span className="bg-red-100 text-red-800 px-3 py-1 rounded-full text-xs font-bold uppercase tracking-wide border border-red-200">
                                  {charge.status.replace('_', ' ')}
                                </span>
                              </div>

                              <div className="grid grid-cols-2 md:grid-cols-3 gap-4 mb-4">
                                <div className="bg-white p-3 rounded-lg border">
                                  <p className="text-xs text-gray-500 uppercase tracking-wide font-medium">Outstanding</p>
                                  <p className="text-lg font-bold text-red-600">${charge.totalOutstanding.toFixed(2)}</p>
                                </div>
                                <div className="bg-white p-3 rounded-lg border">
                                  <p className="text-xs text-gray-500 uppercase tracking-wide font-medium">Service Date</p>
                                  <p className="text-sm font-bold text-gray-900">{new Date(charge.createdDate).toLocaleDateString()}</p>
                                </div>
                                <div className="bg-white p-3 rounded-lg border">
                                  <p className="text-xs text-gray-500 uppercase tracking-wide font-medium">Provider</p>
                                  <p className="text-sm font-bold text-gray-900">{charge.creator.firstName} {charge.creator.lastName}</p>
                                </div>
                              </div>

                              {/* Custom Amount Input for Selected Charges */}
                              {isSelected && (
                                <div className="bg-purple-50 border border-purple-200 rounded-lg p-4">
                                  <div className="flex items-center space-x-4">
                                    <label className="flex items-center space-x-2">
                                      <input
                                        type="checkbox"
                                        checked={scheduleForm.customAmount}
                                        onChange={(e) => handleScheduleFormChange('customAmount', e.target.checked)}
                                        className="text-purple-600 focus:ring-purple-500"
                                        disabled={isSchedulingPayment}
                                      />
                                      <span className="text-sm font-medium text-purple-900">Custom Amount</span>
                                    </label>
                                    
                                    {scheduleForm.customAmount && (
                                      <div className="flex items-center space-x-2">
                                        <span className="text-sm text-purple-700">$</span>
                                        <input
                                          type="number"
                                          min="0.01"
                                          max={charge.totalOutstanding}
                                          step="0.01"
                                          value={scheduleForm.amounts[charge.id] || ''}
                                          onChange={(e) => handleChargeAmountChange(charge.id, parseFloat(e.target.value) || 0)}
                                          placeholder={charge.totalOutstanding.toFixed(2)}
                                          className="w-24 px-2 py-1 border border-purple-300 rounded text-sm focus:ring-1 focus:ring-purple-500 focus:border-transparent"
                                          disabled={isSchedulingPayment}
                                        />
                                        <span className="text-xs text-purple-600">
                                          (Max: ${charge.totalOutstanding.toFixed(2)})
                                        </span>
                                      </div>
                                    )}
                                  </div>
                                  
                                  {!scheduleForm.customAmount && (
                                    <p className="text-xs text-purple-700 mt-2">
                                      Full outstanding amount will be scheduled: ${charge.totalOutstanding.toFixed(2)}
                                    </p>
                                  )}
                                </div>
                              )}
                            </div>
                          </div>

                          <div className="text-right ml-4">
                            <div className={`text-2xl font-black ${isSelected ? 'text-purple-600' : 'text-gray-900'}`}>
                              ${charge.totalOutstanding.toFixed(2)}
                            </div>
                            <p className="text-sm text-gray-500">outstanding</p>
                          </div>
                        </div>
                      </div>
                    );
                  })}
                </div>
              </div>

              {/* Payment Summary */}
              {scheduleForm.selectedChargeIds.length > 0 && (
                <div className="bg-gradient-to-r from-purple-50 to-pink-50 border-2 border-purple-200 rounded-xl p-6 mb-6">
                  <div className="flex items-center justify-between">
                    <div>
                      <h4 className="text-lg font-bold text-purple-900">Scheduled Payment Summary</h4>
                      <p className="text-purple-700">
                        {scheduleForm.selectedChargeIds.length} charge{scheduleForm.selectedChargeIds.length !== 1 ? 's' : ''} selected
                      </p>
                      {scheduleForm.scheduledDate && scheduleForm.scheduledTime && (
                        <p className="text-sm text-purple-600 mt-1">
                          📅 {new Date(`${scheduleForm.scheduledDate}T${scheduleForm.scheduledTime}`).toLocaleDateString()} at{' '}
                          {new Date(`${scheduleForm.scheduledDate}T${scheduleForm.scheduledTime}`).toLocaleTimeString()}
                        </p>
                      )}
                    </div>
                    <div className="text-right">
                      <p className="text-sm text-purple-600 font-medium">Total Amount</p>
                      <p className="text-4xl font-black text-purple-900">${getScheduledTotal().toFixed(2)}</p>
                    </div>
                  </div>
                </div>
              )}
            </div>

            {/* Fixed Footer with Action Buttons */}
            <div className="p-6 border-t border-gray-200 bg-white rounded-b-xl">
              <div className="flex space-x-4">
                <button
                  onClick={() => setShowSchedulePaymentModal(false)}
                  className="flex-1 px-6 py-4 border-2 border-gray-300 rounded-xl text-gray-700 hover:bg-gray-50 transition-colors font-bold text-lg"
                  disabled={isSchedulingPayment}
                >
                  Cancel
                </button>
                <button
                  onClick={processSchedulePayment}
                  disabled={scheduleForm.selectedChargeIds.length === 0 || !scheduleForm.scheduledDate || !scheduleForm.scheduledTime || isSchedulingPayment}
                  className={`flex-2 px-8 py-4 rounded-xl font-bold text-lg transition-all duration-200 ${
                    scheduleForm.selectedChargeIds.length > 0 && scheduleForm.scheduledDate && scheduleForm.scheduledTime && !isSchedulingPayment
                      ? 'bg-gradient-to-r from-purple-500 to-pink-600 text-white shadow-lg hover:shadow-xl hover:from-purple-600 hover:to-pink-700 transform hover:scale-105'
                      : 'bg-gray-300 text-gray-500 cursor-not-allowed'
                  }`}
                >
                  {isSchedulingPayment ? (
                    <div className="flex items-center justify-center space-x-2">
                      <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-white"></div>
                      <span>Scheduling Payment...</span>
                    </div>
                  ) : (
                    `Schedule Payment ${scheduleForm.selectedChargeIds.length > 0 ? `(${getScheduledTotal().toFixed(2)})` : ''}`
                  )}
                </button>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Enhanced Charge Modal with Detailed Billing */}
      {showChargeModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50 backdrop-blur-sm">
          <div className="bg-white rounded-xl max-w-4xl w-full shadow-2xl max-h-[90vh] flex flex-col">
            {/* Fixed Header */}
            <div className="flex items-center justify-between p-6 border-b border-gray-200 bg-white rounded-t-xl">
              <div>
                <h3 className="text-2xl font-bold text-gray-900">Process Payment</h3>
                <p className="text-gray-600 mt-1">Review and select charges to process</p>
              </div>
              <button
                onClick={() => setShowChargeModal(false)}
                className="p-2 hover:bg-gray-100 rounded-full transition-colors"
              >
                <X className="w-6 h-6 text-gray-500" />
              </button>
            </div>

            {/* Scrollable Content */}
            <div className="flex-1 overflow-y-auto p-6" style={{scrollbarWidth: 'none', msOverflowStyle: 'none'}}>
              <style jsx>{`
                .scrollable-content::-webkit-scrollbar {
                  display: none;
                }
              `}</style>

            {/* Payment Method Section */}
            <div className="bg-emerald-50 border border-emerald-200 rounded-xl p-6 mb-6">
              <div className="flex items-center justify-between">
                <div className="flex items-center space-x-4">
                  <div className="p-3 bg-emerald-100 rounded-xl">
                    <CardIcon className="w-8 h-8 text-emerald-600" />
                  </div>
                  <div>
                    <h4 className="text-lg font-bold text-emerald-900">
                      {defaultPaymentMethod?.brand} ****{defaultPaymentMethod?.last4}
                    </h4>
                    <p className="text-emerald-700">
                      Expires {defaultPaymentMethod?.expMonth}/{defaultPaymentMethod?.expYear} • {defaultPaymentMethod?.description}
                    </p>
                  </div>
                </div>
                <div className="text-right">
                  <div className="bg-emerald-100 px-4 py-2 rounded-lg">
                    <p className="text-sm text-emerald-600 font-medium">Available to Charge</p>
                    <p className="text-2xl font-bold text-emerald-900">${totalOutstanding.toFixed(2)}</p>
                  </div>
                </div>
              </div>
            </div>

            {/* Outstanding Charges Section */}
            <div className="mb-6">
              <div className="flex items-center justify-between mb-4">
                <h4 className="text-xl font-bold text-gray-900">Outstanding Charges</h4>
                <span className="bg-gray-100 text-gray-700 px-3 py-1 rounded-full text-sm font-medium">
                  {outstandingCharges.length} charge{outstandingCharges.length !== 1 ? 's' : ''}
                </span>
              </div>

              <div className="space-y-4">
                {outstandingCharges.map((charge) => {
                  const details = getChargeDetails(charge);
                  const isSelected = selectedCharges.includes(charge.id);
                  
                  return (
                    <div
                      key={charge.id}
                      className={`border-2 rounded-xl p-6 cursor-pointer transition-all duration-200 ${
                        isSelected
                          ? 'border-emerald-500 bg-emerald-50 shadow-lg'
                          : 'border-gray-200 hover:border-gray-300 hover:shadow-md'
                      }`}
                      onClick={(e) => {
                        handleChargeSelection(charge.id);
                      }}
                    >
                      <div className="flex items-start justify-between">
                        <div className="flex items-start space-x-4 flex-1">
                          <div className="mt-1">
                            <div 
                              className={`w-5 h-5 rounded border-2 cursor-pointer transition-all duration-200 flex items-center justify-center ${
                                isSelected 
                                  ? 'bg-emerald-600 border-emerald-600' 
                                  : 'bg-white border-gray-300 hover:border-gray-400'
                              }`}
                              onClick={(e) => {
                                e.stopPropagation();
                                handleChargeSelection(charge.id);
                              }}
                            >
                              {isSelected && (
                                <svg className="w-3 h-3 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={3} d="M5 13l4 4L19 7" />
                                </svg>
                              )}
                            </div>
                          </div>
                          
                          <div className="flex-1">
                            <div className="flex items-center space-x-3 mb-3">
                              <h5 className="text-lg font-bold text-gray-900">{charge.description}</h5>
                              <span className={`px-3 py-1 rounded-full text-xs font-bold uppercase tracking-wide ${
                                charge.status === 'UNPAID' 
                                  ? 'bg-red-100 text-red-800 border border-red-200'
                                  : 'bg-yellow-100 text-yellow-800 border border-yellow-200'
                              }`}>
                                {charge.status.replace('_', ' ')}
                              </span>
                              
                              {details.isOverdue && (
                                <span className="bg-red-500 text-white px-2 py-1 rounded-full text-xs font-bold">
                                  {details.daysOverdue} days overdue
                                </span>
                              )}
                            </div>

                            <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-4">
                              <div className="bg-white p-3 rounded-lg border">
                                <p className="text-xs text-gray-500 uppercase tracking-wide font-medium">Total Amount</p>
                                <p className="text-lg font-bold text-gray-900">${charge.total.toFixed(2)}</p>
                              </div>
                              <div className="bg-white p-3 rounded-lg border">
                                <p className="text-xs text-gray-500 uppercase tracking-wide font-medium">Outstanding</p>
                                <p className="text-lg font-bold text-red-600">${charge.totalOutstanding.toFixed(2)}</p>
                              </div>
                              <div className="bg-white p-3 rounded-lg border">
                                <p className="text-xs text-gray-500 uppercase tracking-wide font-medium">Already Paid</p>
                                <p className="text-lg font-bold text-green-600">${(charge.total - charge.totalOutstanding).toFixed(2)}</p>
                              </div>
                              <div className="bg-white p-3 rounded-lg border">
                                <p className="text-xs text-gray-500 uppercase tracking-wide font-medium">Service Date</p>
                                <p className="text-sm font-bold text-gray-900">{new Date(charge.createdDate).toLocaleDateString()}</p>
                              </div>
                            </div>

                            <div className="flex items-center justify-between text-sm">
                              <div className="flex items-center space-x-4 text-gray-600">
                                <div className="flex items-center space-x-1">
                                  <Building className="w-4 h-4" />
                                  <span>{charge.locationName || 'Main Clinic'}</span>
                                </div>
                                <div className="flex items-center space-x-1">
                                  <span>Provider: {charge.creator.firstName} {charge.creator.lastName}</span>
                                </div>
                              </div>
                              
                              {details.hasPaymentPlan && (
                                <div className="flex items-center space-x-1 text-amber-600 bg-amber-50 px-3 py-1 rounded-full">
                                  <Calendar className="w-4 h-4" />
                                  <span className="text-xs font-medium">Payment Plan Active</span>
                                </div>
                              )}
                            </div>

                            {charge.comment && (
                              <div className="mt-3 p-3 bg-blue-50 rounded-lg border border-blue-200">
                                <p className="text-sm text-blue-800">💬 {charge.comment}</p>
                              </div>
                            )}
                          </div>
                        </div>

                        <div className="text-right ml-4">
                          <div className={`text-3xl font-black ${isSelected ? 'text-emerald-600' : 'text-gray-900'}`}>
                            ${charge.totalOutstanding.toFixed(2)}
                          </div>
                          <p className="text-sm text-gray-500">to charge</p>
                        </div>
                      </div>
                    </div>
                  );
                })}
              </div>
            </div>

            {/* Payment Summary */}
            {selectedCharges.length > 0 && (
              <div className="bg-gradient-to-r from-emerald-50 to-teal-50 border-2 border-emerald-200 rounded-xl p-6 mb-6">
                <div className="flex items-center justify-between">
                  <div>
                    <h4 className="text-lg font-bold text-emerald-900">Payment Summary</h4>
                    <p className="text-emerald-700">
                      {selectedCharges.length} charge{selectedCharges.length !== 1 ? 's' : ''} selected for processing
                    </p>
                  </div>
                  <div className="text-right">
                    <p className="text-sm text-emerald-600 font-medium">Total to Charge</p>
                    <p className="text-4xl font-black text-emerald-900">${getSelectedTotal().toFixed(2)}</p>
                  </div>
                </div>
              </div>
            )}
            </div>

            {/* Fixed Footer with Action Buttons */}
            <div className="p-6 border-t border-gray-200 bg-white rounded-b-xl">
              <div className="flex space-x-4">
                <button
                  onClick={() => setShowChargeModal(false)}
                  className="flex-1 px-6 py-4 border-2 border-gray-300 rounded-xl text-gray-700 hover:bg-gray-50 transition-colors font-bold text-lg"
                  disabled={isProcessing}
                >
                  Cancel
                </button>
                <button
                  onClick={processPayment}
                  disabled={selectedCharges.length === 0 || isProcessing}
                  className={`flex-2 px-8 py-4 rounded-xl font-bold text-lg transition-all duration-200 ${
                    selectedCharges.length > 0 && !isProcessing
                      ? 'bg-gradient-to-r from-emerald-500 to-teal-600 text-white shadow-lg hover:shadow-xl hover:from-emerald-600 hover:to-teal-700 transform hover:scale-105'
                      : 'bg-gray-300 text-gray-500 cursor-not-allowed'
                  }`}
                >
                  {isProcessing ? (
                    <div className="flex items-center justify-center space-x-2">
                      <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-white"></div>
                      <span>Processing Payment...</span>
                    </div>
                  ) : (
                    `Charge ${selectedCharges.length > 0 ? `${getSelectedTotal().toFixed(2)}` : 'Selected Items'}`
                  )}
                </button>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Add Memo Modal */}
      {showMemoModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50 backdrop-blur-sm">
          <div className="bg-white rounded-xl p-6 max-w-lg w-full shadow-2xl">
            <div className="flex items-center justify-between mb-6">
              <div>
                <h3 className="text-xl font-semibold text-gray-900">Add Quick Memo</h3>
                <p className="text-sm text-gray-500 mt-1">
                  Add a note about {patientData.patient.firstName} {patientData.patient.lastName}
                </p>
              </div>
              <button
                onClick={() => {
                  setShowMemoModal(false);
                  setMemoText('');
                }}
                className="p-2 hover:bg-gray-100 rounded-full transition-colors"
                disabled={isAddingMemo}
              >
                <X className="w-5 h-5 text-gray-500" />
              </button>
            </div>

            <div className="mb-6">
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Memo Note
              </label>
              <textarea
                value={memoText}
                onChange={(e) => setMemoText(e.target.value)}
                placeholder="Enter your note about the patient..."
                rows={4}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent resize-none"
                disabled={isAddingMemo}
              />
              <div className="flex items-center justify-between mt-2">
                <span className="text-xs text-gray-500">
                  {memoText.length} characters
                </span>
                {memoText.length > 500 && (
                  <span className="text-xs text-amber-600">
                    Consider keeping memos concise
                  </span>
                )}
              </div>
            </div>

            {/* Preview Section */}
            {memoText.trim() && (
              <div className="mb-6 p-4 bg-blue-50 rounded-lg border border-blue-200">
                <h4 className="text-sm font-medium text-blue-900 mb-2">Preview:</h4>
                <div className="bg-white p-3 rounded border">
                  <div className="flex items-center justify-between mb-2">
                    <span className="text-sm font-medium text-gray-900">
                      Memo - {new Date().toLocaleDateString()}
                    </span>
                    <span className="text-xs text-gray-500">Current Provider</span>
                  </div>
                  <p className="text-sm text-gray-700 whitespace-pre-wrap">{memoText}</p>
                </div>
              </div>
            )}

            <div className="flex space-x-3">
              <button
                onClick={() => {
                  setShowMemoModal(false);
                  setMemoText('');
                }}
                className="flex-1 px-4 py-3 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 transition-colors font-medium"
                disabled={isAddingMemo}
              >
                Cancel
              </button>
              <button
                onClick={handleAddMemo}
                disabled={!memoText.trim() || isAddingMemo}
                className={`flex-1 px-4 py-3 rounded-lg font-medium transition-all duration-200 ${
                  memoText.trim() && !isAddingMemo
                    ? 'bg-blue-500 text-white hover:bg-blue-600 transform hover:scale-105 shadow-lg'
                    : 'bg-gray-300 text-gray-500 cursor-not-allowed'
                }`}
              >
                {isAddingMemo ? (
                  <div className="flex items-center justify-center space-x-2">
                    <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
                    <span>Adding Memo...</span>
                  </div>
                ) : (
                  'Add Memo'
                )}
              </button>
            </div>
          </div>
        </div>
      )}
    </>
  );
};

export default QuickActionsMenu;

================
File: components/VitalsPanel.tsx
================
// import React from 'react';
// import { Activity, Weight, Ruler } from 'lucide-react';
// import { Measurement } from '../types/patient';

// interface VitalsPanelProps {
//   measurements: Measurement[];
// }

// const VitalsPanel: React.FC<VitalsPanelProps> = ({ measurements }) => {
//   const getLatestMeasurement = (type: string) => {
//     return measurements
//       .filter(m => m.type === type)
//       .sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime())[0];
//   };

//   const weight = getLatestMeasurement('WEIGHT');
//   const height = getLatestMeasurement('HEIGHT');
//   const bp = getLatestMeasurement('BLOOD_PRESSURE');

//   const calculateBMI = () => {
//     if (!weight || !height) return null;
    
//     // Convert values to numbers and check if they're valid
//     const weightValue = typeof weight.value === 'number' ? weight.value : parseFloat(weight.value.toString());
//     const heightValue = typeof height.value === 'number' ? height.value : parseFloat(height.value.toString());
    
//     // Check if the conversions resulted in valid numbers
//     if (isNaN(weightValue) || isNaN(heightValue) || weightValue <= 0 || heightValue <= 0) {
//       return null;
//     }
    
//     const weightKg = weightValue * 0.453592; // Convert lbs to kg
//     const heightM = heightValue * 0.0254; // Convert inches to meters
//     return (weightKg / (heightM * heightM)).toFixed(1);
//   };

//   const bmi = calculateBMI();

//   return (
//     <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
//       <h2 className="text-lg font-semibold text-gray-900 mb-4">Vital Signs</h2>
      
//       <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
//         {/* Weight */}
//         <div className="flex items-center space-x-3">
//           <div className="p-2 bg-blue-100 rounded-lg">
//             <Weight className="w-5 h-5 text-blue-600" />
//           </div>
//           <div>
//             <p className="text-sm text-gray-500">Weight</p>
//             <p className="text-lg font-semibold text-gray-900">
//               {weight ? `${weight.value} ${weight.unit}` : 'N/A'}
//             </p>
//           </div>
//         </div>

//         {/* Height */}
//         <div className="flex items-center space-x-3">
//           <div className="p-2 bg-green-100 rounded-lg">
//             <Ruler className="w-5 h-5 text-green-600" />
//           </div>
//           <div>
//             <p className="text-sm text-gray-500">Height</p>
//             <p className="text-lg font-semibold text-gray-900">
//               {height ? `${height.value}"` : 'N/A'}
//             </p>
//           </div>
//         </div>

//         {/* BMI */}
//         <div className="flex items-center space-x-3">
//           <div className="p-2 bg-purple-100 rounded-lg">
//             <Activity className="w-5 h-5 text-purple-600" />
//           </div>
//           <div>
//             <p className="text-sm text-gray-500">BMI</p>
//             <p className="text-lg font-semibold text-gray-900">
//               {bmi || 'N/A'}
//             </p>
//           </div>
//         </div>

//         {/* Blood Pressure */}
//         <div className="flex items-center space-x-3">
//           <div className="p-2 bg-red-100 rounded-lg">
//             <Activity className="w-5 h-5 text-red-600" />
//           </div>
//           <div>
//             <p className="text-sm text-gray-500">Blood Pressure</p>
//             <p className="text-lg font-semibold text-gray-900">
//               {bp ? `${bp.value} ${bp.unit}` : 'N/A'}
//             </p>
//           </div>
//         </div>
//       </div>

//       {/* Last Updated */}
//       {weight && (
//         <p className="text-xs text-gray-400 mt-4">
//           Last updated: {new Date(weight.date).toLocaleDateString()}
//         </p>
//       )}
//     </div>
//   );
// };

// export default VitalsPanel;

================
File: hooks/usePatientData.ts
================
// hooks/usePatientData.ts - Updated with Future Appointment
import { useState, useEffect } from 'react';
import { PatientData } from '../types/patient';

export const usePatientData = () => {
  const [patientData, setPatientData] = useState<PatientData | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const loadData = async () => {
      try {
        // Simulate API delay
        await new Promise(resolve => setTimeout(resolve, 1000));

        const mockData: PatientData = {
          patient: {
            id: "pt_5f8a92a3eb28c15dc7a9a3d1",
            firstName: "Sarah",
            lastName: "Johnson",
            phoneNumber: "+12065551234",
            email: "sarah.johnson@example.com",
            address: "123 Main Street",
            addressLineTwo: "Apt 4B",
            city: "Seattle",
            state: "WA",
            zipCode: "98101",
            country: "USA",
            maritalStatus: "MARRIED",
            gender: "FEMALE",
            employmentStatus: "EMPLOYED",
            dateOfBirth: "1985-07-15",
            allergies: ["Penicillin", "Peanuts"],
            familyHistory: ["Diabetes", "Hypertension"],
            medicalHistory: ["Asthma", "Seasonal allergies"],
            prescriptions: ["Albuterol inhaler", "Zyrtec"],
            goalWeight: 145,
            isOnboardingComplete: true,
            createdDate: "2022-03-15T10:30:00Z",
            firebaseUid: "firebase_uid_12345",
            addressValid: true,
            guardianName: undefined,
            guardianPhoneNumber: undefined,
            measurements: [
              {
                id: "ms_9d8c7b6a5f4e3d2c1b0a",
                patientId: "pt_5f8a92a3eb28c15dc7a9a3d1",
                type: "WEIGHT",
                value: 155.5,
                unit: "lb",
                date: "2023-08-12T14:20:00Z"
              },
              {
                id: "ms_8c7d6e5f4g3h2i1j0k",
                patientId: "pt_5f8a92a3eb28c15dc7a9a3d1",
                type: "HEIGHT",
                value: 65.5,
                unit: "in",
                date: "2023-08-12T14:20:00Z"
              },
              {
                id: "ms_7b6c5d4e3f2g1h0i9j",
                patientId: "pt_5f8a92a3eb28c15dc7a9a3d1",
                type: "BLOOD_PRESSURE",
                value: "120/80",
                unit: "mmHg",
                date: "2023-09-05T09:15:00Z"
              }
            ],
            medications: [
              {
                id: "md_6f5e4d3c2b1a0z9y8x",
                patientId: "pt_5f8a92a3eb28c15dc7a9a3d1",
                name: "Albuterol",
                dosage: "90mcg",
                frequency: "As needed",
                startDate: "2022-05-10",
                endDate: undefined,
                active: true
              },
              {
                id: "md_5e4d3c2b1a0z9y8x7w",
                patientId: "pt_5f8a92a3eb28c15dc7a9a3d1",
                name: "Zyrtec",
                dosage: "10mg",
                frequency: "Once daily",
                startDate: "2023-02-20",
                endDate: undefined,
                active: true
              }
            ]
          },
          alerts: [
            {
              id: "alrt_1a2b3c4d5e6f7g8h9i",
              type: "FORM_SUBMITTED",
              data: {
                id: "frm_sub_7d8e9f0a1b2c3d4e",
                name: "Allergy Questionnaire",
                patient: {
                  id: "pt_5f8a92a3eb28c15dc7a9a3d1",
                  firstName: "Sarah",
                  lastName: "Johnson"
                },
                submittedAt: "2023-10-02T11:15:00Z"
              },
              createdDate: "2023-10-02T11:15:00Z",
              actionRequired: true,
              resolvedDate: undefined,
              tags: [
                { id: "tag_5a4b3c2d1e", name: "Forms" },
                { id: "tag_6b5c4d3e2f", name: "Patient Intake" }
              ],
              assignedProvider: {
                id: "usr_3c4d5e6f7g8h9i0j1k",
                firstName: "Robert",
                lastName: "Davis",
                email: "robert.davis@decodahealth.com",
                title: "MD, Internal Medicine",
                department: "Primary Care",
                phone: "+1 (206) 555-0123"
              },
              resolvingProvider: undefined,
              occurances: 1,
              patient: {
                id: "pt_5f8a92a3eb28c15dc7a9a3d1",
                firstName: "Sarah",
                lastName: "Johnson",
                email: "sarah.johnson@example.com",
                phoneNumber: "+12065551234"
              }
            },
            {
              id: "alrt_2b3c4d5e6f7g8h9i0j",
              type: "APPOINTMENT_SCHEDULED",
              data: {
                id: "evt_0a1b2c3d4e5f6g7h8i9",
                title: "Annual Physical",
                start: "2024-03-20T11:00:00.000Z",
                end: "2024-03-20T12:00:00.000Z",
                organizer: {
                  id: "usr_4d5e6f7g8h9i0j1k2l",
                  firstName: "Emily",
                  lastName: "Chen"
                },
                appointment: {
                  id: "apt_1b2c3d4e5f6g7h8i9j0",
                  reason: "Annual physical examination",
                  confirmationStatus: "CONFIRMED"
                }
              },
              createdDate: "2024-03-01T16:45:00Z",
              actionRequired: true,
              resolvedDate: undefined,
              tags: [
                { id: "tag_7c6d5e4f3g", name: "Appointments" }
              ],
              assignedProvider: {
                id: "usr_4d5e6f7g8h9i0j1k2l",
                firstName: "Emily",
                lastName: "Chen",
                email: "emily.chen@decodahealth.com",
                title: "MD, Family Medicine",
                department: "Family Practice",
                phone: "+1 (206) 555-0156"
              },
              resolvingProvider: undefined,
              occurances: 1,
              patient: {
                id: "pt_5f8a92a3eb28c15dc7a9a3d1",
                firstName: "Sarah",
                lastName: "Johnson",
                email: "sarah.johnson@example.com",
                phoneNumber: "+12065551234"
              }
            },
            {
              id: "alrt_3c4d5e6f7g8h9i0j1k",
              type: "MESSAGE_RECEIVED",
              data: {
                message: "Hello Dr. Davis, I've been experiencing increased allergy symptoms despite taking the medication as prescribed. Could we discuss other options?",
                data: {
                  chatId: "cht_8g7f6e5d4c3b2a1z0y",
                  messageType: "TEXT"
                },
                patient: {
                  id: "pt_5f8a92a3eb28c15dc7a9a3d1",
                  firstName: "Sarah",
                  lastName: "Johnson"
                }
              },
              createdDate: "2023-09-25T14:30:00Z",
              actionRequired: true,
              resolvedDate: undefined,
              tags: [
                { id: "tag_8d7e6f5g4h", name: "Messages" },
                { id: "tag_9e8f7g6h5i", name: "Urgent" }
              ],
              assignedProvider: {
                id: "usr_3c4d5e6f7g8h9i0j1k",
                firstName: "Robert",
                lastName: "Davis",
                email: "robert.davis@decodahealth.com",
                title: "MD, Internal Medicine",
                department: "Primary Care",
                phone: "+1 (206) 555-0123"
              },
              resolvingProvider: undefined,
              occurances: 1,
              patient: {
                id: "pt_5f8a92a3eb28c15dc7a9a3d1",
                firstName: "Sarah",
                lastName: "Johnson",
                email: "sarah.johnson@example.com",
                phoneNumber: "+12065551234"
              }
            },
            // NEW BILLING ALERT
            {
              id: "alrt_4d5e6f7g8h9i0j1k2l",
              type: "OUTSTANDING_BALANCE",
              data: {
                totalOutstanding: 135.0,
                charges: [
                  {
                    id: "ch_7d8e9f0a1b2c3d4e5f6g",
                    description: "Initial Consultation",
                    amount: 50.0,
                    dueDate: "2023-07-15T00:00:00Z"
                  },
                  {
                    id: "ch_1a2s3d4f5g6h7j8k9l",
                    description: "Prescription Renewal",
                    amount: 85.0,
                    dueDate: "2023-11-05T00:00:00Z"
                  }
                ],
                paymentPlanAvailable: true
              },
              createdDate: "2023-10-05T12:00:00Z",
              actionRequired: true,
              resolvedDate: undefined,
              tags: [
                { id: "tag_10a9b8c7d6", name: "Billing" },
                { id: "tag_11b0a9c8d7", name: "Payment Required" }
              ],
              assignedProvider: {
                id: "usr_5e6f7g8h9i0j1k2l3m",
                firstName: "Maria",
                lastName: "Rodriguez",
                email: "maria.rodriguez@decodahealth.com",
                title: "Billing Coordinator",
                department: "Patient Financial Services",
                phone: "+1 (206) 555-0178"
              },
              resolvingProvider: undefined,
              occurances: 1,
              patient: {
                id: "pt_5f8a92a3eb28c15dc7a9a3d1",
                firstName: "Sarah",
                lastName: "Johnson",
                email: "sarah.johnson@example.com",
                phoneNumber: "+12065551234"
              }
            }
          ],
          charges: [
            {
              id: "ch_7d8e9f0a1b2c3d4e5f6g",
              total: 250.0,
              totalOutstanding: 50.0,
              description: "Initial Consultation",
              status: "PARTIALLY_PAID",
              patient: {
                id: "pt_5f8a92a3eb28c15dc7a9a3d1",
                firstName: "Sarah",
                lastName: "Johnson",
                phoneNumber: "+12065551234",
                email: "sarah.johnson@example.com",
                address: "123 Main Street",
                city: "Seattle",
                state: "WA",
                zipCode: "98101"
              },
              createdDate: "2023-06-15T09:30:00Z",
              creator: {
                id: "usr_3c4d5e6f7g8h9i0j1k",
                firstName: "Robert",
                lastName: "Davis",
                email: "robert.davis@decodahealth.com"
              },
              adjustments: [
                {
                  id: "adj_1a2b3c4d5e6f7g8h9i",
                  chargeId: "ch_7d8e9f0a1b2c3d4e5f6g",
                  amount: 25.0,
                  type: "DISCOUNT",
                  description: "New patient discount",
                  createdDate: "2023-06-15T09:35:00Z"
                }
              ],
              payments: [
                {
                  id: "pmt_9h8g7f6e5d4c3b2a1",
                  amount: 175.0,
                  createdDate: "2023-06-15T10:15:00Z",
                  paymentMethod: {
                    id: "pm_7y6t5r4e3w2q1z0x9",
                    patientId: "pt_5f8a92a3eb28c15dc7a9a3d1",
                    brand: "Visa",
                    last4: "4242",
                    expMonth: 12,
                    expYear: 2025,
                    description: "Primary Card",
                    type: "CARD",
                    isDefault: true
                  },
                  paymentMedium: "CARD",
                  refunds: []
                }
              ],
              plannedPayments: [
                {
                  id: "pln_5r4e3w2q1z0x9v8u7",
                  amount: 50.0,
                  paymentDate: "2023-07-15T00:00:00Z",
                  status: "SCHEDULED"
                }
              ],
              comment: "Patient requested payment plan for remaining balance",
              items: [
                {
                  item_id: "itm_3q2w1e4r5t6y7u8i9o",
                  charge_id: "ch_7d8e9f0a1b2c3d4e5f6g",
                  quantity: 1,
                  item: {
                    id: "itm_3q2w1e4r5t6y7u8i9o",
                    name: "Initial Consultation",
                    description: "First-time comprehensive health evaluation",
                    price: 250.0,
                    active: true,
                    createdDate: "2022-01-10T08:00:00Z",
                    category: "Consultations"
                  }
                }
              ],
              locationId: "loc_1q2w3e4r5t6y7u8i9o",
              locationName: "Main Clinic"
            },
            {
              id: "ch_2b3c4d5e6f7g8h9i0j",
              total: 175.0,
              totalOutstanding: 0.0,
              description: "Follow-up Appointment",
              status: "PAID",
              patient: {
                id: "pt_5f8a92a3eb28c15dc7a9a3d1",
                firstName: "Sarah",
                lastName: "Johnson",
                phoneNumber: "+12065551234",
                email: "sarah.johnson@example.com",
                address: "123 Main Street",
                city: "Seattle",
                state: "WA",
                zipCode: "98101"
              },
              createdDate: "2023-08-20T14:00:00Z",
              creator: {
                id: "usr_3c4d5e6f7g8h9i0j1k",
                firstName: "Robert",
                lastName: "Davis",
                email: "robert.davis@decodahealth.com"
              },
              adjustments: [],
              payments: [
                {
                  id: "pmt_8g7f6e5d4c3b2a1z0",
                  amount: 175.0,
                  createdDate: "2023-08-20T14:30:00Z",
                  paymentMethod: {
                    id: "pm_7y6t5r4e3w2q1z0x9",
                    patientId: "pt_5f8a92a3eb28c15dc7a9a3d1",
                    brand: "Visa",
                    last4: "4242",
                    expMonth: 12,
                    expYear: 2025,
                    description: "Primary Card",
                    type: "CARD",
                    isDefault: true
                  },
                  paymentMedium: "CARD",
                  refunds: []
                }
              ],
              plannedPayments: [],
              comment: undefined,
              items: [
                {
                  item_id: "itm_5t6y7u8i9o0p1a2s3d",
                  charge_id: "ch_2b3c4d5e6f7g8h9i0j",
                  quantity: 1,
                  item: {
                    id: "itm_5t6y7u8i9o0p1a2s3d",
                    name: "Follow-up Appointment",
                    description: "Scheduled follow-up visit",
                    price: 175.0,
                    active: true,
                    createdDate: "2022-01-10T08:00:00Z",
                    category: "Consultations"
                  }
                }
              ],
              locationId: "loc_1q2w3e4r5t6y7u8i9o",
              locationName: "Main Clinic"
            },
            {
              id: "ch_1a2s3d4f5g6h7j8k9l",
              total: 85.0,
              totalOutstanding: 85.0,
              description: "Prescription Renewal",
              status: "UNPAID",
              patient: {
                id: "pt_5f8a92a3eb28c15dc7a9a3d1",
                firstName: "Sarah",
                lastName: "Johnson",
                phoneNumber: "+12065551234",
                email: "sarah.johnson@example.com",
                address: "123 Main Street",
                city: "Seattle",
                state: "WA",
                zipCode: "98101"
              },
              createdDate: "2023-10-05T11:45:00Z",
              creator: {
                id: "usr_3c4d5e6f7g8h9i0j1k",
                firstName: "Robert",
                lastName: "Davis",
                email: "robert.davis@decodahealth.com"
              },
              adjustments: [],
              payments: [],
              plannedPayments: [],
              comment: "Prescription renewal without appointment",
              items: [
                {
                  item_id: "itm_7u8i9o0p1a2s3d4f5g",
                  charge_id: "ch_1a2s3d4f5g6h7j8k9l",
                  quantity: 1,
                  item: {
                    id: "itm_7u8i9o0p1a2s3d4f5g",
                    name: "Prescription Renewal",
                    description: "Renewal of existing prescriptions",
                    price: 85.0,
                    active: true,
                    createdDate: "2022-01-10T08:00:00Z",
                    category: "Medications"
                  }
                }
              ],
              locationId: undefined,
              locationName: undefined
            }
          ],
          events: [
            {
              id: "evt_0a1b2c3d4e5f6g7h8i9",
              title: "Annual Physical",
              organizer: {
                id: "usr_4d5e6f7g8h9i0j1k2l",
                firstName: "Emily",
                lastName: "Chen",
                email: "emily.chen@decodahealth.com"
              },
              start: "2024-03-20T11:00:00.000Z",
              end: "2024-03-20T12:00:00.000Z",
              type: "APPOINTMENT",
              status: "CONFIRMED",
              meetingLink: undefined,
              attendees: [
                {
                  user: {
                    id: "pt_5f8a92a3eb28c15dc7a9a3d1",
                    firstName: "Sarah",
                    lastName: "Johnson",
                    email: "sarah.johnson@example.com"
                  },
                  inviteStatus: "ACCEPTED"
                },
                {
                  user: {
                    id: "usr_4d5e6f7g8h9i0j1k2l",
                    firstName: "Emily",
                    lastName: "Chen",
                    email: "emily.chen@decodahealth.com"
                  },
                  inviteStatus: "ACCEPTED"
                }
              ],
              location: {
                id: "loc_1q2w3e4r5t6y7u8i9o",
                name: "Main Clinic",
                address: "456 Medical Plaza",
                city: "Seattle",
                state: "WA",
                zipCode: "98101",
                country: "USA",
                isVirtual: false,
                meetingLink: undefined
              },
              formCompleted: false,
              appointment: {
                id: "apt_1b2c3d4e5f6g7h8i9j0",
                eventId: "evt_0a1b2c3d4e5f6g7h8i9",
                patientId: "pt_5f8a92a3eb28c15dc7a9a3d1",
                providerId: "usr_4d5e6f7g8h9i0j1k2l",
                reason: "Annual physical examination",
                confirmationStatus: "CONFIRMED",
                confirmationDate: "2024-03-01T16:45:00.000Z",
                checkedInDate: undefined,
                appointmentType: "ANNUAL_PHYSICAL"
              }
            },
            {
              id: "evt_7d8e9f0a1b2c3d4e5f6g",
              title: "Follow-up Appointment",
              organizer: {
                id: "usr_3c4d5e6f7g8h9i0j1k",
                firstName: "Robert",
                lastName: "Davis",
                email: "robert.davis@decodahealth.com"
              },
              start: "2023-08-20T14:00:00.000Z",
              end: "2023-08-20T14:30:00.000Z",
              type: "APPOINTMENT",
              status: "COMPLETED",
              meetingLink: undefined,
              attendees: [
                {
                  user: {
                    id: "pt_5f8a92a3eb28c15dc7a9a3d1",
                    firstName: "Sarah",
                    lastName: "Johnson",
                    email: "sarah.johnson@example.com"
                  },
                  inviteStatus: "ACCEPTED"
                },
                {
                  user: {
                    id: "usr_3c4d5e6f7g8h9i0j1k",
                    firstName: "Robert",
                    lastName: "Davis",
                    email: "robert.davis@decodahealth.com"
                  },
                  inviteStatus: "ACCEPTED"
                }
              ],
              location: {
                id: "loc_1q2w3e4r5t6y7u8i9o",
                name: "Main Clinic",
                address: "456 Medical Plaza",
                city: "Seattle",
                state: "WA",
                zipCode: "98101",
                country: "USA",
                isVirtual: false,
                meetingLink: undefined
              },
              formCompleted: true,
              appointment: {
                id: "apt_8e9f0a1b2c3d4e5f6g7",
                eventId: "evt_7d8e9f0a1b2c3d4e5f6g",
                patientId: "pt_5f8a92a3eb28c15dc7a9a3d1",
                providerId: "usr_3c4d5e6f7g8h9i0j1k",
                reason: "Follow-up for seasonal allergies",
                confirmationStatus: "CONFIRMED",
                confirmationDate: "2023-08-15T09:22:00.000Z",
                checkedInDate: "2023-08-20T13:50:00.000Z",
                appointmentType: "FOLLOW_UP"
              }
            },
            // 🔥 NEW: Future Appointment for Testing Reschedule/Cancel Functionality
            {
              id: "evt_future_2025_test",
              title: "Allergy Follow-up",
              organizer: {
                id: "usr_3c4d5e6f7g8h9i0j1k",
                firstName: "Robert",
                lastName: "Davis",
                email: "robert.davis@decodahealth.com"
              },
              start: "2025-07-15T10:00:00.000Z",
              end: "2025-07-15T10:30:00.000Z",
              type: "APPOINTMENT",
              status: "CONFIRMED",
              meetingLink: undefined,
              attendees: [
                {
                  user: {
                    id: "pt_5f8a92a3eb28c15dc7a9a3d1",
                    firstName: "Sarah",
                    lastName: "Johnson",
                    email: "sarah.johnson@example.com"
                  },
                  inviteStatus: "ACCEPTED"
                },
                {
                  user: {
                    id: "usr_3c4d5e6f7g8h9i0j1k",
                    firstName: "Robert",
                    lastName: "Davis",
                    email: "robert.davis@decodahealth.com"
                  },
                  inviteStatus: "ACCEPTED"
                }
              ],
              location: {
                id: "loc_1q2w3e4r5t6y7u8i9o",
                name: "Main Clinic",
                address: "456 Medical Plaza",
                city: "Seattle",
                state: "WA",
                zipCode: "98101",
                country: "USA",
                isVirtual: false,
                meetingLink: undefined
              },
              formCompleted: false,
              appointment: {
                id: "apt_future_allergy_followup",
                eventId: "evt_future_2025_test",
                patientId: "pt_5f8a92a3eb28c15dc7a9a3d1",
                providerId: "usr_3c4d5e6f7g8h9i0j1k",
                reason: "Follow-up on allergy treatment effectiveness",
                confirmationStatus: "CONFIRMED",
                confirmationDate: "2025-06-20T14:30:00.000Z",
                checkedInDate: undefined,
                appointmentType: "FOLLOW_UP"
              }
            }
          ],
          doctorsNotes: [
            {
              id: "nt_1a2b3c4d5e6f7g8h9i",
              eventId: "evt_7d8e9f0a1b2c3d4e5f6g",
              parentNoteId: "nt_1a2b3c4d5e6f7g8h9i",
              noteTranscriptId: "ntr_9h8g7f6e5d4c3b2a1z",
              duration: 1800,
              version: 2,
              currentVersion: 2,
              content: "Patient presented with complaints of seasonal allergies. Symptoms include nasal congestion, sneezing, and itchy eyes persisting for 2 weeks. Patient reports taking OTC Zyrtec with partial relief.\n\nVital signs within normal range. Clear lung sounds, no wheezing or distress. No sinus tenderness observed.\n\nAssessment: Seasonal allergic rhinitis\n\nPlan:\n1. Continue Zyrtec 10mg daily\n2. Add Flonase nasal spray 1-2 sprays each nostril daily\n3. Avoid known allergens, keep windows closed during high pollen times\n4. Return if symptoms worsen or do not improve within 2 weeks",
              summary: "Follow-up for seasonal allergies. Prescribed Flonase in addition to existing Zyrtec regimen. Patient advised on allergen avoidance.",
              aiGenerated: true,
              template: undefined,
              patient: {
                id: "pt_5f8a92a3eb28c15dc7a9a3d1",
                firstName: "Sarah",
                lastName: "Johnson",
                phoneNumber: "+12065551234",
                email: "sarah.johnson@example.com"
              },
              createdDate: "2023-08-20T14:45:00.000Z",
              providerNames: ["Dr. Robert Davis", "Dr. Emily Chen"]
            },
            {
              id: "nt_2b3c4d5e6f7g8h9i0j",
              eventId: "evt_8e9f0a1b2c3d4e5f6g7",
              parentNoteId: "nt_2b3c4d5e6f7g8h9i0j",
              noteTranscriptId: "ntr_8g7f6e5d4c3b2a1z0y",
              duration: 1200,
              version: 1,
              currentVersion: 1,
              content: "Patient presented for asthma check-up. Reports using rescue inhaler about 2-3 times per week, mostly after exercise. No nighttime symptoms. No ER visits or systemic steroids needed since last visit.\n\nLung examination reveals good air entry bilaterally, occasional end-expiratory wheeze after forced exhalation.\n\nSpirometry results: FEV1 85% of predicted. No significant change from previous.\n\nAssessment: Moderate persistent asthma, well controlled.\n\nPlan:\n1. Continue Albuterol inhaler as needed\n2. Reviewed proper inhaler technique\n3. Encouraged regular exercise with appropriate warm-up\n4. Follow up in 6 months or sooner if symptoms worsen",
              summary: "Routine asthma check-up. Current regimen is effective with good control. No changes to medications needed.",
              aiGenerated: true,
              template: undefined,
              patient: {
                id: "pt_5f8a92a3eb28c15dc7a9a3d1",
                firstName: "Sarah",
                lastName: "Johnson",
                phoneNumber: "+12065551234",
                email: "sarah.johnson@example.com"
              },
              createdDate: "2023-05-10T09:30:00.000Z",
              providerNames: ["Dr. Robert Davis"]
            }
          ],
          memos: [
            {
              id: "qn_1a2b3c4d5e6f7g8h9i",
              patient: {
                id: "pt_5f8a92a3eb28c15dc7a9a3d1",
                firstName: "Sarah",
                lastName: "Johnson",
                email: "sarah.johnson@example.com",
                phoneNumber: "+12065551234"
              },
              note: "Patient called to discuss increased allergy symptoms. Advised to double Flonase dose temporarily and schedule follow-up if no improvement in 7 days.",
              creator: {
                id: "usr_3c4d5e6f7g8h9i0j1k",
                firstName: "Robert",
                lastName: "Davis",
                email: "robert.davis@decodahealth.com"
              },
              createdDate: "2023-09-26T10:15:00Z",
              updatedDate: "2023-09-26T10:15:00Z"
            },
            {
              id: "qn_2b3c4d5e6f7g8h9i0j",
              patient: {
                id: "pt_5f8a92a3eb28c15dc7a9a3d1",
                firstName: "Sarah",
                lastName: "Johnson",
                email: "sarah.johnson@example.com",
                phoneNumber: "+12065551234"
              },
              note: "Patient requested prescription refill for Albuterol inhaler. Approved 90-day supply with 2 refills.",
              creator: {
                id: "usr_4d5e6f7g8h9i0j1k2l",
                firstName: "Emily",
                lastName: "Chen",
                email: "emily.chen@decodahealth.com"
              },
              createdDate: "2023-07-12T14:30:00Z",
              updatedDate: "2023-07-12T14:30:00Z"
            }
          ],
          paymentMethods: [
            {
              id: "pm_7y6t5r4e3w2q1z0x9",
              patientId: "pt_5f8a92a3eb28c15dc7a9a3d1",
              brand: "Visa",
              last4: "4242",
              expMonth: 12,
              expYear: 2025,
              accountHolderType: undefined,
              accountNumberLast4: undefined,
              bankName: undefined,
              routingNumber: undefined,
              description: "Primary Card",
              type: "CARD",
              isDefault: true
            },
            {
              id: "pm_6x5w4v3u2t1s0r9q8",
              patientId: "pt_5f8a92a3eb28c15dc7a9a3d1",
              brand: undefined,
              last4: undefined,
              expMonth: undefined,
              expYear: undefined,
              accountHolderType: "individual",
              accountNumberLast4: 9876,
              bankName: "Chase Bank",
              routingNumber: 123456789,
              description: "Checking Account",
              type: "BANK_ACCOUNT",
              isDefault: false
            }
          ]
        };

        setPatientData(mockData);
        setLoading(false);
      } catch (err) {
        console.error('Error loading patient data:', err);
        setError('Failed to load patient data');
        setLoading(false);
      }
    };

    loadData();
  }, []);

  return { patientData, loading, error };
};

================
File: public/file.svg
================
<svg fill="none" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg"><path d="M14.5 13.5V5.41a1 1 0 0 0-.3-.7L9.8.29A1 1 0 0 0 9.08 0H1.5v13.5A2.5 2.5 0 0 0 4 16h8a2.5 2.5 0 0 0 2.5-2.5m-1.5 0v-7H8v-5H3v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1M9.5 5V2.12L12.38 5zM5.13 5h-.62v1.25h2.12V5zm-.62 3h7.12v1.25H4.5zm.62 3h-.62v1.25h7.12V11z" clip-rule="evenodd" fill="#666" fill-rule="evenodd"/></svg>

================
File: public/globe.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><g clip-path="url(#a)"><path fill-rule="evenodd" clip-rule="evenodd" d="M10.27 14.1a6.5 6.5 0 0 0 3.67-3.45q-1.24.21-2.7.34-.31 1.83-.97 3.1M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16m.48-1.52a7 7 0 0 1-.96 0H7.5a4 4 0 0 1-.84-1.32q-.38-.89-.63-2.08a40 40 0 0 0 3.92 0q-.25 1.2-.63 2.08a4 4 0 0 1-.84 1.31zm2.94-4.76q1.66-.15 2.95-.43a7 7 0 0 0 0-2.58q-1.3-.27-2.95-.43a18 18 0 0 1 0 3.44m-1.27-3.54a17 17 0 0 1 0 3.64 39 39 0 0 1-4.3 0 17 17 0 0 1 0-3.64 39 39 0 0 1 4.3 0m1.1-1.17q1.45.13 2.69.34a6.5 6.5 0 0 0-3.67-3.44q.65 1.26.98 3.1M8.48 1.5l.01.02q.41.37.84 1.31.38.89.63 2.08a40 40 0 0 0-3.92 0q.25-1.2.63-2.08a4 4 0 0 1 .85-1.32 7 7 0 0 1 .96 0m-2.75.4a6.5 6.5 0 0 0-3.67 3.44 29 29 0 0 1 2.7-.34q.31-1.83.97-3.1M4.58 6.28q-1.66.16-2.95.43a7 7 0 0 0 0 2.58q1.3.27 2.95.43a18 18 0 0 1 0-3.44m.17 4.71q-1.45-.12-2.69-.34a6.5 6.5 0 0 0 3.67 3.44q-.65-1.27-.98-3.1" fill="#666"/></g><defs><clipPath id="a"><path fill="#fff" d="M0 0h16v16H0z"/></clipPath></defs></svg>

================
File: public/next.svg
================
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 394 80"><path fill="#000" d="M262 0h68.5v12.7h-27.2v66.6h-13.6V12.7H262V0ZM149 0v12.7H94v20.4h44.3v12.6H94v21h55v12.6H80.5V0h68.7zm34.3 0h-17.8l63.8 79.4h17.9l-32-39.7 32-39.6h-17.9l-23 28.6-23-28.6zm18.3 56.7-9-11-27.1 33.7h17.8l18.3-22.7z"/><path fill="#000" d="M81 79.3 17 0H0v79.3h13.6V17l50.2 62.3H81Zm252.6-.4c-1 0-1.8-.4-2.5-1s-1.1-1.6-1.1-2.6.3-1.8 1-2.5 1.6-1 2.6-1 1.8.3 2.5 1a3.4 3.4 0 0 1 .6 4.3 3.7 3.7 0 0 1-3 1.8zm23.2-33.5h6v23.3c0 2.1-.4 4-1.3 5.5a9.1 9.1 0 0 1-3.8 3.5c-1.6.8-3.5 1.3-5.7 1.3-2 0-3.7-.4-5.3-1s-2.8-1.8-3.7-3.2c-.9-1.3-1.4-3-1.4-5h6c.1.8.3 1.6.7 2.2s1 1.2 1.6 1.5c.7.4 1.5.5 2.4.5 1 0 1.8-.2 2.4-.6a4 4 0 0 0 1.6-1.8c.3-.8.5-1.8.5-3V45.5zm30.9 9.1a4.4 4.4 0 0 0-2-3.3 7.5 7.5 0 0 0-4.3-1.1c-1.3 0-2.4.2-3.3.5-.9.4-1.6 1-2 1.6a3.5 3.5 0 0 0-.3 4c.3.5.7.9 1.3 1.2l1.8 1 2 .5 3.2.8c1.3.3 2.5.7 3.7 1.2a13 13 0 0 1 3.2 1.8 8.1 8.1 0 0 1 3 6.5c0 2-.5 3.7-1.5 5.1a10 10 0 0 1-4.4 3.5c-1.8.8-4.1 1.2-6.8 1.2-2.6 0-4.9-.4-6.8-1.2-2-.8-3.4-2-4.5-3.5a10 10 0 0 1-1.7-5.6h6a5 5 0 0 0 3.5 4.6c1 .4 2.2.6 3.4.6 1.3 0 2.5-.2 3.5-.6 1-.4 1.8-1 2.4-1.7a4 4 0 0 0 .8-2.4c0-.9-.2-1.6-.7-2.2a11 11 0 0 0-2.1-1.4l-3.2-1-3.8-1c-2.8-.7-5-1.7-6.6-3.2a7.2 7.2 0 0 1-2.4-5.7 8 8 0 0 1 1.7-5 10 10 0 0 1 4.3-3.5c2-.8 4-1.2 6.4-1.2 2.3 0 4.4.4 6.2 1.2 1.8.8 3.2 2 4.3 3.4 1 1.4 1.5 3 1.5 5h-5.8z"/></svg>

================
File: public/vercel.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1155 1000"><path d="m577.3 0 577.4 1000H0z" fill="#fff"/></svg>

================
File: public/window.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path fill-rule="evenodd" clip-rule="evenodd" d="M1.5 2.5h13v10a1 1 0 0 1-1 1h-11a1 1 0 0 1-1-1zM0 1h16v11.5a2.5 2.5 0 0 1-2.5 2.5h-11A2.5 2.5 0 0 1 0 12.5zm3.75 4.5a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5M7 4.75a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0m1.75.75a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5" fill="#666"/></svg>

================
File: types/patient.ts
================
// types/patient.ts - Enhanced with Payment Scheduling
export interface Patient {
  id: string;
  firstName: string;
  lastName: string;
  phoneNumber: string;
  email: string;
  address: string;
  addressLineTwo?: string;
  city: string;
  state: string;
  zipCode: string;
  country: string;
  addressValid: boolean;
  guardianName?: string;
  guardianPhoneNumber?: string;
  maritalStatus: string;
  gender: string;
  employmentStatus: string;
  dateOfBirth: string;
  allergies: string[];
  familyHistory: string[];
  medicalHistory: string[];
  prescriptions: string[];
  goalWeight: number;
  isOnboardingComplete: boolean;
  createdDate: string;
  firebaseUid: string;
  measurements: Measurement[];
  medications: Medication[];
}

export interface Measurement {
  id: string;
  patientId: string;
  type: string;
  value: number | string;
  unit: string;
  date: string;
}

export interface Medication {
  id: string;
  patientId: string;
  name: string;
  dosage: string;
  frequency: string;
  startDate: string;
  endDate?: string;
  active: boolean;
}

// Enhanced Provider interface with professional details
export interface Provider {
  id: string;
  firstName: string;
  lastName: string;
  email: string;
  title?: string;        // Professional title (e.g., "MD, Internal Medicine")
  department?: string;   // Department (e.g., "Primary Care", "Patient Financial Services")
  phone?: string;        // Phone number
}

export interface Alert {
  id: string;
  type: string;
  data: any;
  createdDate: string;
  actionRequired: boolean;
  resolvedDate?: string;
  tags: { id: string; name: string }[];
  assignedProvider: Provider;  // Enhanced Provider interface
  resolvingProvider?: Provider;
  occurances: number;
  patient: {
    id: string;
    firstName: string;
    lastName: string;
    email: string;
    phoneNumber: string;
  };
}

export interface PaymentMethod {
  id: string;
  patientId: string;
  brand?: string;
  last4?: string;
  expMonth?: number;
  expYear?: number;
  accountHolderType?: string;
  accountNumberLast4?: number;
  bankName?: string;
  routingNumber?: number;
  description: string;
  type: string;
  isDefault: boolean;
}

export interface PlannedPayment {
  id: string;
  amount: number;
  paymentDate: string;
  status: string;
}

export interface Payment {
  id: string;
  amount: number;
  createdDate: string;
  paymentMethod?: PaymentMethod;
  paymentMedium: string;
  refunds: any[];
}

export interface Adjustment {
  id: string;
  chargeId: string;
  amount: number;
  type: string;
  description: string;
  createdDate: string;
}

export interface ChargeItem {
  item_id: string;
  charge_id: string;
  quantity: number;
  item: {
    id: string;
    name: string;
    description: string;
    price: number;
    active: boolean;
    createdDate: string;
    category: string;
  };
}

// 🔥 ENHANCED: Charge interface with scheduled payment support
export interface Charge {
  id: string;
  total: number;
  totalOutstanding: number;
  description: string;
  status: string;
  patient: {
    id: string;
    firstName: string;
    lastName: string;
    phoneNumber: string;
    email: string;
    address: string;
    city: string;
    state: string;
    zipCode: string;
  };
  createdDate: string;
  creator: {
    id: string;
    firstName: string;
    lastName: string;
    email: string;
  };
  adjustments: Adjustment[];
  payments: Payment[];
  plannedPayments?: PlannedPayment[]; // Made optional with proper typing
  comment?: string;
  items: ChargeItem[];
  locationId?: string;
  locationName?: string;
  // 🔥 NEW: Scheduled payment functionality
  scheduledPaymentDate?: string;     // ISO date string for when payment is scheduled
  scheduledPaymentAmount?: number;   // Amount to be charged on the scheduled date
  scheduledPaymentMethod?: PaymentMethod; // Payment method to use for scheduled payment
  autoPayEnabled?: boolean;          // Whether auto-payment is enabled for this charge
}

export interface Event {
  id: string;
  title: string;
  organizer: {
    id: string;
    firstName: string;
    lastName: string;
    email: string;
  };
  start: string;
  end: string;
  type: string;
  status: string;
  meetingLink?: string;
  attendees: {
    user: {
      id: string;
      firstName: string;
      lastName: string;
      email: string;
    };
    inviteStatus: string;
  }[];
  location: {
    id: string;
    name: string;
    address: string;
    city: string;
    state: string;
    zipCode: string;
    country: string;
    isVirtual: boolean;
    meetingLink?: string;
  };
  formCompleted: boolean;
  appointment: {
    id: string;
    eventId: string;
    patientId: string;
    providerId: string;
    reason: string;
    confirmationStatus: string;
    confirmationDate: string;
    checkedInDate?: string;
    appointmentType: string;
  };
}

export interface DoctorNote {
  id: string;
  eventId: string;
  parentNoteId: string;
  noteTranscriptId?: string;
  duration?: number;
  version: number;
  currentVersion: number;
  content: string;
  summary: string;
  aiGenerated: boolean;
  template?: any;
  patient: {
    id: string;
    firstName: string;
    lastName: string;
    phoneNumber: string;
    email: string;
  };
  createdDate: string;
  providerNames: string[];
}

export interface Memo {
  id: string;
  patient: {
    id: string;
    firstName: string;
    lastName: string;
    email: string;
    phoneNumber: string;
  };
  note: string;
  creator: {
    id: string;
    firstName: string;
    lastName: string;
    email: string;
  };
  createdDate: string;
  updatedDate: string;
}

export interface PatientData {
  patient: Patient;
  alerts: Alert[];
  charges: Charge[];
  events: Event[];
  doctorsNotes: DoctorNote[];
  memos: Memo[];
  paymentMethods: PaymentMethod[];
}

================
File: .gitignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# env files (can opt-in for committing if needed)
.env*

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

================
File: eslint.config.mjs
================
import { dirname } from "path";
import { fileURLToPath } from "url";
import { FlatCompat } from "@eslint/eslintrc";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const compat = new FlatCompat({
  baseDirectory: __dirname,
});

const eslintConfig = [
  ...compat.extends("next/core-web-vitals", "next/typescript"),
];

export default eslintConfig;

================
File: next.config.ts
================
import type { NextConfig } from "next";

const nextConfig: NextConfig = {
  /* config options here */
};

export default nextConfig;

================
File: package.json
================
{
  "name": "decoda-health-userprofile",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "lucide-react": "^0.523.0",
    "next": "15.3.4",
    "react": "^19.0.0",
    "react-dom": "^19.0.0"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3",
    "@types/node": "^20",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "autoprefixer": "^10.4.21",
    "eslint": "^9",
    "eslint-config-next": "15.3.4",
    "postcss": "^8.5.6",
    "tailwindcss": "^3.4.17",
    "typescript": "^5"
  }
}

================
File: postcss.config.mjs
================
const config = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
};

export default config;

================
File: README.md
================
This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.

================
File: tailwind.config.js
================
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    './pages/**/*.{js,ts,jsx,tsx,mdx}',
    './components/**/*.{js,ts,jsx,tsx,mdx}',
    './app/**/*.{js,ts,jsx,tsx,mdx}',
    './hooks/**/*.{js,ts,jsx,tsx}',
    './types/**/*.{js,ts,jsx,tsx}',
  ],
  theme: {
    extend: {
      colors: {
        primary: {
          50: '#eff6ff',
          100: '#dbeafe',
          200: '#bfdbfe',
          300: '#93c5fd',
          400: '#60a5fa',
          500: '#3b82f6',
          600: '#2563eb',
          700: '#1d4ed8',
          800: '#1e40af',
          900: '#1e3a8a',
        },
        medical: {
          primary: '#1d4ed8',
          success: '#059669',
          warning: '#d97706',
          danger: '#dc2626',
        }
      },
      fontFamily: {
        sans: ['-apple-system', 'BlinkMacSystemFont', 'Segoe UI', 'Roboto', 'Helvetica Neue', 'Arial', 'sans-serif'],
      },
    },
  },
  plugins: [],
}

================
File: tsconfig.json
================
{
  "compilerOptions": {
    "target": "es5",
    "lib": ["dom", "dom.iterable", "es6"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
